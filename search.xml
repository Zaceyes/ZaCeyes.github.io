<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在渲染流水线中CPU做了什么</title>
    <url>/2019/12/21/%E5%9C%A8%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%B8%ADcpu%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p>渲染流水线的起点是CPU，即应用阶段。</p>
<p>应用阶段大致可分为三个阶段：</p>
<ul>
<li>把数据加载到显存中。</li>
<li>设置渲染状态。</li>
<li>调用 Draw Call<a id="more"></a>
<h2 id="把数据加载到显存中"><a href="#把数据加载到显存中" class="headerlink" title="把数据加载到显存中"></a>把数据加载到显存中</h2></li>
</ul>
<p>所有渲染所需要的数据都需要从硬盘中加载到系统内存中。然后，网格和纹理等数据又被加载到显卡上的存储空间——显存中。</p>
<p>这是因为，显卡对于显存的访问速度更快，而且大多数显卡对于RAM没有直接的访问权利。</p>
<p>当把数据加载到显存中后，RAM中的数据就可以移除了。但对于一些数据来说，CPU仍然需要访问它们（例如，我们希望CPU可以访问网格数据来进行碰撞检测），那么我们可能就不希望这些数据被移除，因为从硬盘加载到RAM的过程是十分耗时的。</p>
<p>在这之后，开发者还需要通过CPU来设置渲染状态，从而“指导”GPU进行渲染工作。</p>
<h2 id="设置渲染状态"><a href="#设置渲染状态" class="headerlink" title="设置渲染状态"></a>设置渲染状态</h2><p>渲染状态，通俗地讲，就是定义了要怎么渲染场景中的网格。例如，使用哪个顶点着色器/片元着色器、光源属性、材质等等。</p>
<p>如果没有更改渲染状态，那么所有的网格都将使用同一种渲染状态。</p>
<p>在准备好上述所有工作后，CPU就需要调用一个渲染命令来告诉GPU，这个渲染命令就是 Draw Call。</p>
<h2 id="调用-Draw-Call"><a href="#调用-Draw-Call" class="headerlink" title="调用 Draw Call"></a>调用 Draw Call</h2><p>Draw Call， 实际上就是一个命令。它的发起方是CPU，接收方是GPU。<br>这个命令仅仅会指向一个需要被渲染的图元列表，而不会再包含任何材质信息，因为在上一个阶段中已经完成了。</p>
<p>当给定了一个 Draw Call时，GPU就会根据渲染状态（例如材质、纹理、着色器等）和所有输入的顶点数据来进行计算，最终输出成屏幕上显示的像素。</p>
]]></content>
      <tags>
        <tag>渲染流程</tag>
      </tags>
  </entry>
  <entry>
    <title>渲染流程概念的上三个阶段</title>
    <url>/2019/12/20/%E6%A6%82%E5%BF%B5%E4%B8%8A%E6%B8%B2%E6%9F%93%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5/</url>
    <content><![CDATA[<p>本笔记总结自《Unity Shader 入门精要》第二章</p>
<h2 id="三个阶段"><a href="#三个阶段" class="headerlink" title="三个阶段"></a>三个阶段</h2><p>《Render-Time Rendering，Third Edition》一书中将一个渲染流程分成三个阶段：应用阶段（Application Stage）、几何阶段（Geometry Stage）、光栅化阶段（Rasterizer Stage）。</p>
<p><strong>注意：这里仅仅是概念性的阶段，每个阶段本身通常也是一个流水线系统，即包含了子流水线阶段。</strong></p>
<a id="more"></a>
<h3 id="应用阶段"><a href="#应用阶段" class="headerlink" title="应用阶段"></a>应用阶段</h3><p>该阶段由应用主导，通常由CPU负责实现。</p>
<p>这一阶段由三个主要任务：</p>
<ul>
<li>准备场景数据。例如，摄像机的位置、视锥体、场景中包含了哪些模型、使用了哪些光源等等。</li>
<li>粗粒度剔除工作。把不可见的物体剔除出去，不需要再移交给几何阶段进行处理。</li>
<li>设置每个模型的渲染状态。包括但不限于使用的材质（漫反射颜色、高光反射颜色）、使用的纹理、使用的 Shader 等</li>
</ul>
<p><strong>这一阶段最重要的输出是渲染所需的几何信息，即渲染图元</strong>。渲染图元可以是点、线、三角面等。这些渲染图元将会被传递给下一个阶段——几何阶段</p>
<h3 id="几何阶段"><a href="#几何阶段" class="headerlink" title="几何阶段"></a>几何阶段</h3><p>这一阶段用于处理所有和要绘制的几何相关的事情。例如，决定需要绘制的图元是什么，怎么绘制它们，在哪里绘制它们。这一阶段通常在GPU上进行。</p>
<p>这一阶段重要任务是：</p>
<ul>
<li>把顶点坐标变换到屏幕空间中，再交给光栅器进行处理。通过对输入的渲染图元进行多步处理后，这一阶段将会输出屏幕空间的二维顶点坐标、每个顶点对应的深度值、着色等相关信息，并传递给下一个阶段。</li>
</ul>
<p>这个阶段可以进一步分成更小的流水线阶段。</p>
<h3 id="光栅化阶段"><a href="#光栅化阶段" class="headerlink" title="光栅化阶段"></a>光栅化阶段</h3><p>这一阶段将会使用几何阶段传递的数据来产生屏幕上的像素，并渲染出最终的图像。这一阶段也是在GPU上运行。</p>
<p>这一阶段主要任务是：</p>
<ul>
<li>决定每个渲染图元中的哪些像素应该被绘制在屏幕上。它需要对上一个阶段得到的逐顶点数据（如纹理坐标、顶点颜色等）进行插值，然后再进行逐像素处理。</li>
</ul>
<p>这个阶段可以进一步分成更小的流水线阶段。</p>
<h2 id="三个阶段之间的联系"><a href="#三个阶段之间的联系" class="headerlink" title="三个阶段之间的联系"></a>三个阶段之间的联系</h2><p><img src="http://img7x7.ddimg.cn/imgother10/31/24/1900783597_3_epub.png" alt="三个阶段之间的联系"></p>
<h2 id="个人理解总结"><a href="#个人理解总结" class="headerlink" title="个人理解总结"></a>个人理解总结</h2><p>三个阶段中，应用阶段用于收集数据、需求；几何阶段对数据、需求进行分析处理；光栅化阶段将处理过的数据渲染出来。</p>
]]></content>
      <tags>
        <tag>渲染流程</tag>
      </tags>
  </entry>
  <entry>
    <title>如何高效产生m个n范围内的不重复随机数（m&lt;=n)</title>
    <url>/2019/10/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E4%BA%A7%E7%94%9Fm%E4%B8%AAn%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E4%B8%8D%E9%87%8D%E5%A4%8D%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%88m-n/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">var</span> random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    nums[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> r = random.Next(i, <span class="number">99</span>);</span><br><span class="line">    Swap(<span class="keyword">ref</span> nums[i], <span class="keyword">ref</span> nums[r]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>排序的稳定性</title>
    <url>/2019/10/21/%E6%8E%92%E5%BA%8F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7/</url>
    <content><![CDATA[<h2 id="什么是算法的稳定性"><a href="#什么是算法的稳定性" class="headerlink" title="什么是算法的稳定性"></a>什么是算法的稳定性</h2><p>稳定排序就是能保证排序前两个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同。</p>
<h2 id="稳定排序算法"><a href="#稳定排序算法" class="headerlink" title="稳定排序算法"></a>稳定排序算法</h2><a id="more"></a>
<p>冒泡排序、鸡尾酒排序、插入排序、桶排序、计数排序、合并排序、基数排序、二叉排序树排序</p>
<h2 id="不稳定排序算法"><a href="#不稳定排序算法" class="headerlink" title="不稳定排序算法"></a>不稳定排序算法</h2><p>选择排序、希尔排序、组合排序、堆排序、平滑排序、快速排序</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序的稳定性</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2019/10/16/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>以一值为基准，将比所有数划分为两部分，一部分比基准值大，一部分比基准值小。循环操作。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><a id="more"></a>
<ul>
<li>做一个递增排序</li>
<li>开始时，以第一个元素为基准</li>
<li>从后往前找比基准值小的值，并记录位置。<!-- more --></li>
<li>从前往后找比基准值大的值，并记录位置。</li>
<li>交换这两个值。</li>
<li>重复上面操作，直到数组被分成两部分。</li>
<li>然后把基准值跟比基准值小的部分的最后一个元素交换，此时，基准值找到自己位置。</li>
<li>将比基准值小、比基准值大当成两个新数组，重复上面步骤。</li>
<li>直至排序完成</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> j = partition(array, low, high);</span><br><span class="line">    Sort(array, low, j<span class="number">-1</span>);</span><br><span class="line">    Sort(array, j+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i = low;</span><br><span class="line">    <span class="keyword">int</span> j = high + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">value</span> = array[low];</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 在左边找到比基准值大的</span></span><br><span class="line">        <span class="keyword">while</span> (array[++i] &lt; <span class="keyword">value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == high) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在右边找到比基准值小的</span></span><br><span class="line">        <span class="keyword">while</span> (array[--j] &gt; <span class="keyword">value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == low) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交换这两个值</span></span><br><span class="line">        Swap(array, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    Swap(array, low, j)</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">QuickSort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span> &#123;</span><br><span class="line">        Sort(array, <span class="number">0</span>, array.Length<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> j = Partition(array, low, high);</span><br><span class="line">        Sort(array, low, j - <span class="number">1</span>);</span><br><span class="line">        Sort(array, j + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Partition</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> i = low;</span><br><span class="line">        <span class="keyword">int</span> j = high + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">value</span> = array[low];</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (array[++i] &lt; <span class="keyword">value</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == high) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (array[--j] &gt; <span class="keyword">value</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == low) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">            Swap(array, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        Swap(array, low, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">int</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">            Console.Write(<span class="string">"&#123;0&#125; "</span>, item);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 用于排序的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] array = &#123; <span class="number">25</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">        Console.Write(<span class="string">"排序前的数组:"</span>);</span><br><span class="line">        PrintArray(array);</span><br><span class="line">        Sort(array);</span><br><span class="line">        Console.Write(<span class="string">"排序后的数组:"</span>);</span><br><span class="line">        PrintArray(array);</span><br><span class="line"></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>求100以内质数</title>
    <url>/2019/10/16/%E6%B1%82100%E4%BB%A5%E5%86%85%E8%B4%A8%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">printf(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span> &amp;&amp; i != j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == j)</span><br><span class="line">            printf(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>优化</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">printf(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">100</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; Math.Sqrt(i)+<span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (j &gt; Math.Sqrt(i)) printf(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>Unity-Resources与StreamingAssets文件夹</title>
    <url>/2019/10/12/unity-resources%E4%B8%8Estreamingassets%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">Resources</th>
<th style="text-align:center">StreamingAssets</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">文件权限</td>
<td style="text-align:center">只读</td>
<td style="text-align:center">只读</td>
</tr>
<tr>
<td style="text-align:center">是否添加到发布包</td>
<td style="text-align:center">是</td>
<td style="text-align:center">是</td>
</tr>
<tr>
<td style="text-align:center">文件内容</td>
<td style="text-align:center">加密</td>
<td style="text-align:center">原始</td>
</tr>
<tr>
<td style="text-align:center">加载方式</td>
<td style="text-align:center">Resources</td>
<td style="text-align:center">WWW</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Resources</tag>
        <tag>StreamingAssets</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-使用JsonUtility读取JSON配置表</title>
    <url>/2019/10/12/unity-%E4%BD%BF%E7%94%A8jsonutility%E8%AF%BB%E5%8F%96json%E9%85%8D%E7%BD%AE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="配置表设计"><a href="#配置表设计" class="headerlink" title="配置表设计"></a>配置表设计</h2><p>前提</p>
<ul>
<li>JsonUtility 只能对类进行序列化和反序列化，不能直接对链表，数组直接进行序列化和反序列化，更不能对字典进行序列化和反序列化；<ul>
<li>对链表，数组进行序列化和反序列化，需要将其包装在一个类里面；</li>
<li>对字典，需要转换成链表，数组，再进行序列化和反序列化。</li>
</ul>
</li>
</ul>
<p>JSON配置表相关设计如下：</p>
<ol>
<li>对于单个 JSON 配置表都需要有对应的两个类：<ul>
<li>实体类，存储配置表中每一行数据；</li>
<li>配置表类，用一个链表存储所有的实体类。</li>
</ul>
</li>
</ol>
<a id="more"></a>
<ol>
<li>JSON 格式</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"配置表类中的链表名字"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"属性一"</span>: <span class="string">"值"</span>,</span><br><span class="line">            <span class="attr">"属性二"</span>: <span class="string">"值"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"属性一"</span>: <span class="string">"值"</span>,</span><br><span class="line">            <span class="attr">"属性二"</span>: <span class="string">"值"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"属性一"</span>: <span class="string">"值"</span>,</span><br><span class="line">            <span class="attr">"属性二"</span>: <span class="string">"值"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>一个货物的配置表</p>
<ol>
<li>JSON 配置表</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"goodsList"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Hat"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"A nice hat."</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Gloves"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"A Warm Gloves."</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Shoes"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"Tattered Shoes."</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>货物实体类</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Goods</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Introduction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>货物配置表类</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoodsConfig</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; goodsList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="配置表读取"><a href="#配置表读取" class="headerlink" title="配置表读取"></a>配置表读取</h2><ol>
<li>配置表放哪？</li>
</ol>
<ul>
<li>游戏玩法相关，与游戏策划相关联的，可以影响游戏体验的。如，角色属性，物品属性之类的。放在 Resources 文件夹下。</li>
<li>其他的，如，音量设置、亮度设置一类的，放在 StreamingAssets 文件夹下。</li>
</ul>
<p>下面是一个后面示例中用到的 JSON 文件，GoodsConfig.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"goodsList"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Hat"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"A nice hat."</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Gloves"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"A Warm Gloves."</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Shoes"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"Tattered Shoes."</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>读取 Resources 文件夹下的配置表</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConfigReader.cs</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConfigReader</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载 Resources 文件夹下的 JSON 文件</span></span><br><span class="line">        TextAsset textAsset = Resources.Load&lt;TextAsset&gt;(<span class="string">"GoodsConfig"</span>);</span><br><span class="line">        <span class="keyword">string</span> json = textAsset.text;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 JSON 字符串反序列成对象</span></span><br><span class="line">        GoodsConfig goodsConfig = JsonUtility.FromJson&lt;GoodsConfig&gt;(json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问数据</span></span><br><span class="line">        <span class="keyword">foreach</span> (Goods item <span class="keyword">in</span> goodsConfig.goodsList) &#123;</span><br><span class="line">            Debug.Log(<span class="string">"ID:"</span> + item.ID + <span class="string">", Name:"</span> + item.Name + <span class="string">", Introduction:"</span> + item.Introduction);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">ID:1, Name:Hat, Introduction:A nice hat.</span><br><span class="line">ID:2, Name:Gloves, Introduction:A Warm Gloves.</span><br><span class="line">ID:3, Name:Shoes, Introduction:Tattered Shoes.</span><br></pre></td></tr></table></figure>
<ol>
<li>读取 StreamingAssets 文件夹下的配置表</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConfigReader.cs</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConfigReader</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 加载 StreamingAssets 文件夹下的 JSON 文件</span></span><br><span class="line">        <span class="keyword">string</span> path = <span class="string">"file://"</span> + Application.streamingAssetsPath + <span class="string">"/GoodsConfig.json"</span>;</span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(path);</span><br><span class="line">        <span class="keyword">if</span> (www.error != <span class="literal">null</span>) &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"error : "</span> + path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待文件读取</span></span><br><span class="line">        <span class="keyword">while</span> (!www.isDone) &#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> json = www.text;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 JSON 字符串反序列成对象</span></span><br><span class="line">        GoodsConfig goodsConfig = JsonUtility.FromJson&lt;GoodsConfig&gt;(json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问数据</span></span><br><span class="line">        <span class="keyword">foreach</span> (Goods item <span class="keyword">in</span> goodsConfig.goodsList) &#123;</span><br><span class="line">            Debug.Log(<span class="string">"ID:"</span> + item.ID + <span class="string">", Name:"</span> + item.Name + <span class="string">", Introduction:"</span> + item.Introduction);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">ID:1, Name:Hat, Introduction:A nice hat.</span><br><span class="line">ID:2, Name:Gloves, Introduction:A Warm Gloves.</span><br><span class="line">ID:3, Name:Shoes, Introduction:Tattered Shoes.</span><br></pre></td></tr></table></figure>
<ul>
<li>Resources 文件夹里的资源通过 Resources 类加载。</li>
<li>StreamingAssets里的资源通过 WWW 类加载。</li>
</ul>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>JsonUtility</tag>
        <tag>配置表</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity - JsonUtility</title>
    <url>/2019/10/11/unity-jsonutility/</url>
    <content><![CDATA[<h2 id="JsonUtility-须知"><a href="#JsonUtility-须知" class="headerlink" title="JsonUtility 须知"></a>JsonUtility 须知</h2><ul>
<li>JsonUtility 效率高</li>
<li>JsonUtility 无法直接的对 List<T> 对象进行序列化和反序列化，需要将 List<T> 包装（Wrap）到一个类当中，然后序列化和反序列化包含这个List<T> 的对象即可。</li>
<li>JsonUtility 不支持 Dictionary。<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnVuaXR5M2QuY29tL01hbnVhbC9KU09OU2VyaWFsaXphdGlvbi5odG1s" title="https://docs.unity3d.com/Manual/JSONSerialization.html">官方的文档中有说明<i class="fa fa-external-link"></i></span></li>
<li>我们要做的就是在JsonUtility局限性或者说是“规则”之下去使用。比如 Dictionary 可以使用数组来替代，一定要使用 Dictionary，则可以进行二次转换。</li>
</ul>
<h2 id="JsonUtility-示例"><a href="#JsonUtility-示例" class="headerlink" title="JsonUtility 示例"></a>JsonUtility 示例</h2><p>下面是两个在所有示例中通用的类</p>
<a id="more"></a>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Goods.cs</span></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Goods</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Introduction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Goods</span>(<span class="params"><span class="keyword">int</span> id, <span class="keyword">string</span> name, <span class="keyword">string</span> introduction</span>)</span> &#123;</span><br><span class="line">        ID = id;</span><br><span class="line">        Name = name;</span><br><span class="line">        Introduction = introduction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GoodsList.cs</span></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line">[<span class="meta">System.Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GoodsList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Goods&gt; goodsList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例一-序列化一个对象"><a href="#示例一-序列化一个对象" class="headerlink" title="示例一 序列化一个对象"></a>示例一 序列化一个对象</h3><p>本示例将一个 Goods 类的对象 goods 序列化成 JSON 字符串。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSONTest.cs</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JSONTest</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">4<span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span> &#123;</span><br><span class="line">        Goods goods = <span class="keyword">new</span> <span class="keyword">new</span> Goods(<span class="number">1</span>, <span class="string">"Hat"</span>, <span class="string">"A nice hat."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="keyword">string</span> json = JsonUtility.ToJson(goods);</span><br><span class="line">        Debug.Log(json);</span><br><span class="line">4&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&#123;<span class="string">"ID"</span>:1,<span class="string">"Name"</span>:<span class="string">"Hat"</span>,<span class="string">"Introduction"</span>:<span class="string">"A nice hat."</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例二-序列化一个链表"><a href="#示例二-序列化一个链表" class="headerlink" title="示例二 序列化一个链表"></a>示例二 序列化一个链表</h3><p>本示例将 GoodsList 序列化成 JSON 字符串，其中 GoodsList 包含一个有着三个 Goods 对象的链表。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSONTest.cs</span></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JSONTest</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span> &#123;</span><br><span class="line">        GoodsList goodsList = <span class="keyword">new</span> GoodsList();</span><br><span class="line">        goodsList.goodsList = <span class="keyword">new</span> List&lt;Goods&gt;() &#123;</span><br><span class="line">            <span class="keyword">new</span> Goods(<span class="number">1</span>, <span class="string">"Hat"</span>, <span class="string">"A nice hat."</span>),</span><br><span class="line">            <span class="keyword">new</span> Goods(<span class="number">2</span>, <span class="string">"Gloves"</span>, <span class="string">"A Warm Gloves."</span>),</span><br><span class="line">            <span class="keyword">new</span> Goods(<span class="number">3</span>, <span class="string">"Shoes"</span>, <span class="string">"Tattered Shoes."</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="keyword">string</span> json = JsonUtility.ToJson(goodsList);</span><br><span class="line">        Debug.Log(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">&#123;<span class="string">"goodsList"</span>:[&#123;<span class="string">"ID"</span>:1,<span class="string">"Name"</span>:<span class="string">"Hat"</span>,<span class="string">"Introduction"</span>:<span class="string">"A nice hat."</span>&#125;,&#123;<span class="string">"ID"</span>:2,<span class="string">"Name"</span>:<span class="string">"Gloves"</span>,<span class="string">"Introduction"</span>:<span class="string">"A Warm Gloves."</span>&#125;,&#123;<span class="string">"ID"</span>:3,<span class="string">"Name"</span>:<span class="string">"Shoes"</span>,<span class="string">"Introduction"</span>:<span class="string">"Tattered Shoes."</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例三-将-JSON-字符串反序列化为类对象"><a href="#示例三-将-JSON-字符串反序列化为类对象" class="headerlink" title="示例三 将 JSON 字符串反序列化为类对象"></a>示例三 将 JSON 字符串反序列化为类对象</h3><p>本示例中将 JSON 字符串 json 反序列化成 Goods 类对象 result，并访问对象成员。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JSONTest</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">4<span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Goods goods = <span class="keyword">new</span> Goods(<span class="number">1</span>, <span class="string">"Hat"</span>, <span class="string">"A nice hat."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="keyword">string</span> json = JsonUtility.ToJson(goods);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        Goods result = JsonUtility.FromJson&lt;Goods&gt;(json);</span><br><span class="line">        Debug.Log(<span class="string">"ID:"</span>+result.ID+<span class="string">", Name:"</span>+result.Name+<span class="string">", Introduction:"</span>+result.Introduction);</span><br><span class="line">4&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">ID:1, Name:Hat, Introduction:A nice hat.</span><br></pre></td></tr></table></figure>
<h3 id="示例四-将-JSON-字符串反序列化为类对象的链表"><a href="#示例四-将-JSON-字符串反序列化为类对象的链表" class="headerlink" title="示例四 将 JSON 字符串反序列化为类对象的链表"></a>示例四 将 JSON 字符串反序列化为类对象的链表</h3><p>本示例中，读取 Resources 文件夹中 JSON文件 GoodsList.json，将其反序列化为一个带有一个链表的类 GoodsList，并访问其链表的元素。</p>
<p>GoodsList.json<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"goodsList"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Hat"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"A nice hat."</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Gloves"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"A Warm Gloves."</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"ID"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"Name"</span>: <span class="string">"Shoes"</span>,</span><br><span class="line">            <span class="attr">"Introduction"</span>: <span class="string">"Tattered Shoes."</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSONTest.cs</span></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JSONTest</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        TextAsset textAsset = Resources.Load&lt;TextAsset&gt;(<span class="string">"GoodsList"</span>);</span><br><span class="line">        <span class="keyword">string</span> json = textAsset.text;</span><br><span class="line"></span><br><span class="line">        GoodsList goodslist = JsonUtility.FromJson&lt;GoodsList&gt;(json);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (Goods item <span class="keyword">in</span> goodslist.goodsList) &#123;</span><br><span class="line">            Debug.Log(<span class="string">"ID:"</span> + item.ID + <span class="string">", Name:"</span> + item.Name + <span class="string">", Introduction:"</span> + item.Introduction);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">ID:1, Name:Hat, Introduction:A nice hat.</span><br><span class="line">ID:2, Name:Gloves, Introduction:A Warm Gloves.</span><br><span class="line">ID:3, Name:Shoes, Introduction:Tattered Shoes.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>JsonUtility</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity-AssetBundle</title>
    <url>/2019/10/11/unity-assetbundle/</url>
    <content><![CDATA[<h2 id="AssetBundle-简介"><a href="#AssetBundle-简介" class="headerlink" title="AssetBundle 简介"></a>AssetBundle 简介</h2><p>AssetBundle 是一个存档文件，包含可在运行时加载的特定平台资源（模型、纹理、预制体、音频、甚至整个场景，除了C#脚本）。</p>
<p>AssetBundle 可以表达彼此之间的依赖关系；例如 AssetBundle A 中的材质可以引用 AssetBundle B 中的纹理。</p>
<p>为了通过网络进行有效传递，可以根据用例需求选用内置算法来压缩 AssetBundle（LZMA 和 LZ4）。</p>
<p>AssetBundle 可用于可下载内容（DLC，又称追加内容下载包），减小初始安装大小，加载针对最终用户平台优化的资源以及减轻运行时内存压力。</p>
<h2 id="AssetBundle-资源打包"><a href="#AssetBundle-资源打包" class="headerlink" title="AssetBundle 资源打包"></a>AssetBundle 资源打包</h2><a id="more"></a>
<ol>
<li>资源标签的设置</li>
</ol>
<p>在 Unity 环境内，除 C#脚本文件以外，选中任何文件后，在 Inspector 面板的下方 <strong>Asset Labels</strong> 功能区域可以给资源设置 AssetBundle 的文件路径和文件后缀。</p>
<p><img src="/images/AssetBundle.png" alt="资源标签的设置"></p>
<ol>
<li>创建 AssetBundle</li>
</ol>
<p>在5.3版本以上，Unity提供了唯一的API来打包AssetBundle，即：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">BuildPipeline.BuildAssetBundles(<span class="keyword">string</span> outputPath,</span><br><span class="line">                                BuildAssetBundleOptions assetBundleOptions,</span><br><span class="line">                                BuildTarget targetPlatform</span><br><span class="line">                            );</span><br></pre></td></tr></table></figure>
<ul>
<li>outputPath：资源包的输出路径，资源会被编译保存到存在的文件夹里，注意编译的时候不会自动创建文件夹。</li>
<li>assetBundleOptions：资源包编译选项，默认为None。</li>
<li>targetPlatform：目标编译平台</li>
</ul>
<p>使用 Unity 编辑器扩展，进行 AssetBundle 资源打包，将其保存在 StreamingAssets 文件夹中。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AssetBundlePacker.cs</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AssetBundlePacker</span> &#123;</span><br><span class="line">    [<span class="meta">MenuItem(<span class="meta-string">"AssetBundlePacker/DoPacker"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoPacker</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">string</span> path = Application.streamingAssetsPath;</span><br><span class="line">        BuildPipeline.BuildAssetBundles(path, BuildAssetBundleOptions.None, BuildTarget.StandaloneWindows64);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打包结果<br><img src="/images/AssetBundle1.png" alt="资源打包结果"></p>
<h3 id="StreamingAssets、StreamingAssets-manifest-是什么文件？"><a href="#StreamingAssets、StreamingAssets-manifest-是什么文件？" class="headerlink" title="StreamingAssets、StreamingAssets.manifest 是什么文件？"></a>StreamingAssets、StreamingAssets.manifest 是什么文件？</h3><p>StreamingAssets.manifest 文件是用于专门存储打包后的 AssetBundle 文件的基本信息的。主要包含以下信息：<br>CRC 校验码：类似于 MD5，用于计算出该资源的一个特殊信息标示；<br>ClassTypes 列表：当前资源关联使用到了Unity 中的哪些类，这些类是以编号索引的形式存在的，每个编号都对应一个类文件。</p>
<p>StreamingAssets 是包含 StreamingAssets.manifest 的 AssetBundle 文件。</p>
<h2 id="下载-AssetBundle"><a href="#下载-AssetBundle" class="headerlink" title="下载 AssetBundle"></a>下载 AssetBundle</h2><p>下载 AssetBundle 有两种方法：缓存机制和非缓存机制。</p>
<h3 id="不使用缓存"><a href="#不使用缓存" class="headerlink" title="不使用缓存"></a>不使用缓存</h3><p>先获取WWW对象，再通过WWW.assetBundle来加载AssetBundle对象，此方法是使用一个新建的WWW对象。AssetBundles并不会缓存到Unity在本地设备存储器上的缓存文件夹中。</p>
<h3 id="使用缓存"><a href="#使用缓存" class="headerlink" title="使用缓存"></a>使用缓存</h3><p>通过LoadFromFile、LoadFromMemory方法来下载AssetBundle文件，下载完成后自动被保存在Unity引擎特定的缓存区内。LoadFromFile从磁盘上的文件同步加载AssetBundle，该功能支持任何压缩类型的压缩包。</p>
<h2 id="AssetBundle-加载"><a href="#AssetBundle-加载" class="headerlink" title="AssetBundle 加载"></a>AssetBundle 加载</h2><p>当把AssetBundle文件从服务器端下载到本地后，需要把下载好的AssetBundle中的内容加载到内存里并创建AssetBundle文件中的对象。</p>
<ul>
<li>AssetBundle.LoadAsset</li>
<li>AssetBundle.LoadAssetAsync</li>
<li>AssetBundle.LoadAllAssets</li>
</ul>
<h3 id="本地加载"><a href="#本地加载" class="headerlink" title="本地加载"></a>本地加载</h3><p>加载存放在 StreamingAssets 文件夹中的 AssetBundle 文件</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InitGame</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span> &#123;</span><br><span class="line">        AssetBundle ab = AssetBundle.LoadFromFile(Application.streamingAssetsPath + <span class="string">"/prefabs/shapes.ab"</span>);</span><br><span class="line">        GameObject cube = ab.LoadAsset&lt;GameObject&gt;(<span class="string">"Cube"</span>);</span><br><span class="line"></span><br><span class="line">        Instantiate(cube);</span><br><span class="line">        GameObject capsule = ab.LoadAsset&lt;GameObject&gt;(<span class="string">"Capsule"</span>);</span><br><span class="line">        Instantiate(capsule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="远程加载"><a href="#远程加载" class="headerlink" title="远程加载"></a>远程加载</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.Experimental.Networking;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DownLoadAssetBundle</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> mainAssetBundleURL = <span class="string">@"http://www.mynet.com/Assets/AssetBundles/Main"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span> allAssetBundleURL = <span class="string">@"http://www.mynet.com/Assets/AssetBundles/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        StartCoroutine(<span class="string">"DownLoadMainAssetBundle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载主[目录]AssetBundle文件.</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">DownLoadMainAssetBundle</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        UnityWebRequest request = UnityWebRequest.GetAssetBundle(mainAssetBundleURL);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> request.Send();</span><br><span class="line">        AssetBundle ab = DownloadHandlerAssetBundle.GetContent(request);</span><br><span class="line">        AssetBundleManifest manifest = ab.LoadAsset&lt;AssetBundleManifest&gt;(<span class="string">"AssetBundleManifest"</span>);</span><br><span class="line">        <span class="keyword">string</span>[] names = manifest.GetAllAssetBundles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.Length; i++) &#123;</span><br><span class="line">            Debug.Log(allAssetBundleURL + names[i]);</span><br><span class="line">            <span class="comment">//StartCoroutine(DownLoadSingleAssetBundle(allAssetBundleURL + names[i]));</span></span><br><span class="line">            StartCoroutine(DownLoadAssetBundleAndSave(allAssetBundleURL + names[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 下载单个AssetBundle文件.</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">DownLoadSingleAssetBundle</span>(<span class="params"><span class="keyword">string</span> url</span>)</span> &#123;</span><br><span class="line">        UnityWebRequest request = UnityWebRequest.GetAssetBundle(url);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> request.Send();</span><br><span class="line">        AssetBundle ab = DownloadHandlerAssetBundle.GetContent(request);</span><br><span class="line">        <span class="keyword">string</span>[] names = ab.GetAllAssetNames();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">string</span> tempName = Path.GetFileNameWithoutExtension(names[i]);</span><br><span class="line">            <span class="comment">//Debug.Log(tempName);</span></span><br><span class="line">            GameObject obj = ab.LoadAsset&lt;GameObject&gt;(tempName);</span><br><span class="line">            GameObject.Instantiate&lt;GameObject&gt;(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下载AssetBundle并且保存到本地.</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">DownLoadAssetBundleAndSave</span>(<span class="params"><span class="keyword">string</span> url</span>)</span> &#123;</span><br><span class="line">        WWW www = <span class="keyword">new</span> WWW(url);</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line">        <span class="keyword">if</span> (www.isDone) &#123;</span><br><span class="line">            <span class="comment">//使用IO技术将www对象存储到本地.</span></span><br><span class="line">            SaveAssetBundle(Path.GetFileName(url), www.bytes, www.bytes.Length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储AssetBundle为本地文件.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SaveAssetBundle</span>(<span class="params"><span class="keyword">string</span> fileName, <span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> count</span>)</span> &#123;</span><br><span class="line">        FileInfo fileInfo = <span class="keyword">new</span> FileInfo(Application.streamingAssetsPath + <span class="string">"//"</span> + fileName);</span><br><span class="line">        FileStream fs = fileInfo.Create();</span><br><span class="line">        fs.Write(bytes, <span class="number">0</span>, count);</span><br><span class="line">        fs.Flush();</span><br><span class="line">        fs.Close();</span><br><span class="line">        fs.Dispose();</span><br><span class="line">        Debug.Log(fileName + <span class="string">"下载完毕~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="AssetBundle-卸载"><a href="#AssetBundle-卸载" class="headerlink" title="AssetBundle 卸载"></a>AssetBundle 卸载</h2><p>使用AssetBundle.Unload方法来卸载AssetBundle创建出的对象。</p>
<ol>
<li>AssetBundle.Unload(false)：释放AssetBundle文件内存镜像，但不销毁已经加载好的Assets对象；</li>
<li>AssetBundle.Unload(true)：释放AssetBundle文件内存镜像同时销毁所有已经加载的Assets对象。</li>
</ol>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity 基础</tag>
        <tag>游戏资源打包</tag>
        <tag>AssetBundle</tag>
      </tags>
  </entry>
  <entry>
    <title>lua-与C#交互</title>
    <url>/2019/10/10/lua-%E4%B8%8Ecsharp%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h2 id="LuaInterface-库"><a href="#LuaInterface-库" class="headerlink" title="LuaInterface 库"></a>LuaInterface 库</h2><p><span class="exturl" data-url="aHR0cDovL2x1YWZvcmdlLm5ldC9wcm9qZWN0cy9sdWFpbnRlcmZhY2Uv" title="http://luaforge.net/projects/luainterface/">LuaInterface下载地址<i class="fa fa-external-link"></i></span></p>
<ul>
<li>LuaInterface是一个用于在Lua语言和Microsoft .NET平台的公共语言运行时（CLR）之间集成的库。 Lua脚本可以使用它来实例化CLR对象，访问属性，调用方法，甚至使用Lua函数处理事件。</li>
<li>LuaInterface.Lua类是CLR访问Lua解释器的主要接口，一个LuaInterface.Lua类对象就代表了一个Lua解释器（或Lua执行环境），Lua解释器可以同时存在多个，并且它们之间是完全相互独立的。</li>
</ul>
<a id="more"></a>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="在-C-中调用-Lua"><a href="#在-C-中调用-Lua" class="headerlink" title="在 C# 中调用 Lua"></a>在 C# 中调用 Lua</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MyMath.lua</span></span><br><span class="line">MyMath = &#123;&#125;</span><br><span class="line"></span><br><span class="line">MyMath.Name = <span class="string">"MyMath"</span></span><br><span class="line">MyMath.PI = <span class="number">3.1415</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyMath.Add</span><span class="params">(first, second)</span></span></span><br><span class="line">    <span class="keyword">return</span> first+second</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MyMath</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> LuaInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 Lua 解释器</span></span><br><span class="line">        Lua lua = <span class="keyword">new</span> Lua();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行 Lua 语句</span></span><br><span class="line">        lua.DoString(<span class="string">"print('Lua in C#')"</span>);</span><br><span class="line"></span><br><span class="line">        lua.DoString(<span class="string">@"</span></span><br><span class="line"><span class="string">            for i=1, 5, 1 do</span></span><br><span class="line"><span class="string">                print(i);</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">        "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行 Lua 文件，参数为 Lua 文件所在路径，下面 MyMath.lua 文件放在项目输出目录中</span></span><br><span class="line">        lua.DoFile(<span class="string">"MyMath.lua"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lua 文件中的变量</span></span><br><span class="line">        Console.WriteLine(lua.GetString(<span class="string">"MyMath.Name"</span>));</span><br><span class="line">        Console.WriteLine(lua.GetNumber(<span class="string">"MyMath.PI"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用 Lua 文件中的函数</span></span><br><span class="line">        LuaFunction Add = lua.GetFunction(<span class="string">"MyMath.Add"</span>);</span><br><span class="line">        Console.WriteLine(Add.Call(<span class="number">1</span>, <span class="number">2</span>)[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        Console.ReadLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lua in C#</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">MyMath</span><br><span class="line">3.1415</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h3 id="在-Lua-中调用-C"><a href="#在-Lua-中调用-C" class="headerlink" title="在 Lua 中调用 C"></a>在 Lua 中调用 C</h3><pre><code>测试项目名称：CSharpAndLua
</code></pre><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tools.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharpAndLuaTest</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Tools</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Show something ... "</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"This is member method."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Main.lua</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"luanet"</span>)   <span class="comment">-- 引用 luanet 程序集</span></span><br><span class="line">luanet.load_assembly(<span class="string">"CSharpAndLua"</span>) <span class="comment">-- 加载程序集</span></span><br><span class="line">Tools = luanet.import_type(<span class="string">"CSharpAndLuaTest.Tools"</span>); <span class="comment">-- 引用类型</span></span><br><span class="line"></span><br><span class="line">Tools.Show();   <span class="comment">-- 调用静态方法</span></span><br><span class="line"></span><br><span class="line">myTools = Tools()</span><br><span class="line">myTools:Print() <span class="comment">-- 调用成员方法</span></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> LuaInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CSharpAndLua</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 Lua 解释器</span></span><br><span class="line">            Lua lua = <span class="keyword">new</span> Lua();</span><br><span class="line">            lua.DoFile(<span class="string">"Main.lua"</span>);</span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Show something ...</span><br><span class="line">This is member method.</span><br></pre></td></tr></table></figure>
<h3 id="热更新初尝试"><a href="#热更新初尝试" class="headerlink" title="热更新初尝试"></a>热更新初尝试</h3><ol>
<li>打开项目程序集所在的根目录bin</li>
<li>更改Lua脚本代码内容</li>
<li>运行程序集</li>
</ol>
<p>修改 lua 文件<br><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Main.lua</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"luanet"</span>)   <span class="comment">-- 引用 luanet 程序集</span></span><br><span class="line">luanet.load_assembly(<span class="string">"CSharpAndLua"</span>) <span class="comment">-- 加载程序集</span></span><br><span class="line">Tools = luanet.import_type(<span class="string">"CSharpAndLuaTest.Tools"</span>); <span class="comment">-- 引用类型</span></span><br><span class="line"></span><br><span class="line">Tools.Show();   <span class="comment">-- 调用静态方法</span></span><br><span class="line"></span><br><span class="line">myTools = Tools()</span><br><span class="line">myTools:Print() <span class="comment">-- 调用成员方法</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Update this file."</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Show something ...</span><br><span class="line">This is member method.</span><br><span class="line">Update this file.</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua 与 C#</tag>
      </tags>
  </entry>
  <entry>
    <title>lua-面向对象模拟</title>
    <url>/2019/10/10/lua-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<p>Lua 语言本身是非常简单的（相对于 C#，C++，Java …）,由于 Lua 语言的创始人的初衷，就是设计一款简单而又小巧的语言，所以说 Lua语言本身是没有“类和对象”的概念的。</p>
<h2 id="类定义模拟"><a href="#类定义模拟" class="headerlink" title="类定义模拟"></a>类定义模拟</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 定义一个表，模拟类</span></span><br><span class="line">Person = &#123;name, age, gender&#125;	<span class="comment">-- 模拟字段</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">-- more --&gt;</span></span><br><span class="line">Person.Id = <span class="number">1</span>			<span class="comment">-- 模拟静态变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person:New</span><span class="params">()</span></span>	<span class="comment">-- 模拟构造函数，通过设置元表的方式</span></span><br><span class="line">4<span class="keyword">local</span> object = &#123;&#125;</span><br><span class="line">4<span class="built_in">setmetatable</span>(object, Person)</span><br><span class="line">4self.<span class="built_in">__index</span> = Person</span><br><span class="line">4<span class="keyword">return</span> object</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person.Print</span><span class="params">()</span></span>	<span class="comment">-- 模拟类方法</span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"Print something"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person:Show</span><span class="params">()</span></span>	<span class="comment">-- 模拟成员方法</span></span><br><span class="line">4<span class="built_in">print</span>(self.name, self.age, self.gender)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="类调用模拟"><a href="#类调用模拟" class="headerlink" title="类调用模拟"></a>类调用模拟</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zak = Person:New()  <span class="comment">-- 创建对象</span></span><br><span class="line">zak.name = <span class="string">"zak"</span>    <span class="comment">-- 字段使用</span></span><br><span class="line">zak.age = <span class="number">18</span></span><br><span class="line">zak.gender = <span class="string">"男"</span></span><br><span class="line">kyle = Person:New()  <span class="comment">-- 创建对象</span></span><br><span class="line">kyle.name = <span class="string">"kyle"</span>    <span class="comment">-- 字段使用</span></span><br><span class="line">kyle.age = <span class="number">16</span></span><br><span class="line">kyle.gender = <span class="string">"男"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Person.Id)    <span class="comment">-- 静态字段使用</span></span><br><span class="line"><span class="built_in">print</span>(zak.Id)</span><br><span class="line"><span class="built_in">print</span>(kyle.Id)</span><br><span class="line"></span><br><span class="line">Person.Print()	    <span class="comment">-- 类方法调用</span></span><br><span class="line"></span><br><span class="line">zak:Show()	        <span class="comment">-- 成员方法调用</span></span><br><span class="line">kyle:Show()</span><br></pre></td></tr></table></figure>
<h2 id="继承模拟"><a href="#继承模拟" class="headerlink" title="继承模拟"></a>继承模拟</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">Programer = Person:New()	<span class="comment">-- 模拟继承父类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Programer:New</span><span class="params">()</span></span></span><br><span class="line">4<span class="keyword">local</span> object = Person:New()</span><br><span class="line">4<span class="built_in">setmetatable</span>(object, Programer)</span><br><span class="line">4self.<span class="built_in">__index</span> = Programer</span><br><span class="line">4<span class="keyword">return</span> object</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Programer:Code</span><span class="params">()</span></span></span><br><span class="line">4<span class="built_in">print</span>(self.name..<span class="string">" is coding"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">zac = Programer:New()</span><br><span class="line">zac.name = <span class="string">"zac"</span>	<span class="comment">-- 调用父类成员</span></span><br><span class="line">zac.age = <span class="number">20</span></span><br><span class="line">zac.gender = <span class="string">"男"</span></span><br><span class="line">zac:Show()</span><br><span class="line">zac:Code()			<span class="comment">-- 调用子类自己成员</span></span><br></pre></td></tr></table></figure>
<h2 id="代码分离"><a href="#代码分离" class="headerlink" title="代码分离"></a>代码分离</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Hero.lua</span></span><br><span class="line">Hero = &#123;name&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero:New</span><span class="params">()</span></span></span><br><span class="line">4<span class="keyword">local</span> object = &#123;&#125;</span><br><span class="line">4<span class="built_in">setmetatable</span>(object, self)</span><br><span class="line">4self.<span class="built_in">__index</span> = self</span><br><span class="line">4<span class="keyword">return</span> object</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hero:Info</span><span class="params">()</span></span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"Hero's name : "</span> .. self.name)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Enemy.lua</span></span><br><span class="line">Enemy = &#123;name&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Enemy:New</span><span class="params">()</span></span></span><br><span class="line">4<span class="keyword">local</span> object = &#123;&#125;</span><br><span class="line">4<span class="built_in">setmetatable</span>(object, self)</span><br><span class="line">4self.<span class="built_in">__index</span> = self</span><br><span class="line">4<span class="keyword">return</span> object</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Enemy:Info</span><span class="params">()</span></span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"Enemy's name : "</span> .. self.name)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- main.lua</span></span><br><span class="line"><span class="built_in">dofile</span>(<span class="string">"Hero.lua"</span>)	<span class="comment">-- 引用类，参数为类文件路径</span></span><br><span class="line"><span class="built_in">dofile</span>(<span class="string">".\\Enemy.lua"</span>)</span><br><span class="line"></span><br><span class="line">hero = Hero:New()</span><br><span class="line">hero.name = <span class="string">"a"</span></span><br><span class="line">hero:Info()</span><br><span class="line"></span><br><span class="line">enemy = Enemy:New()</span><br><span class="line">enemy.name = <span class="string">"b"</span></span><br><span class="line">enemy:Info()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua 面向对象模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>lua-模块</title>
    <url>/2019/10/09/lua-%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h2 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MyMath.lua   -- 脚本的名称要和模块的名称一样</span></span><br><span class="line">MyMath = &#123;&#125;     <span class="comment">-- 定义模块</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3.1415</span>     <span class="comment">-- 定义常量</span></span><br><span class="line"></span><br><span class="line">&lt;!<span class="comment">-- more --&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span><span class="params">(first, second)</span></span>     <span class="comment">-- 定义公开方法</span></span><br><span class="line">    <span class="keyword">return</span> first + second</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>            <span class="comment">-- 定义私有方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"这是私有方法"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MyMath   <span class="comment">-- 结束模块</span></span><br></pre></td></tr></table></figure>
<h2 id="模块使用"><a href="#模块使用" class="headerlink" title="模块使用"></a>模块使用</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"MyMath"</span>)   <span class="comment">-- 加载模块</span></span><br><span class="line"><span class="built_in">print</span>(MyMath.Add(MyMath.PI, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">myMath = <span class="built_in">require</span>(<span class="string">"MyMath"</span>)  <span class="comment">-- 加载模块，别名使用</span></span><br><span class="line"><span class="built_in">print</span>(myMath.Add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua 模块</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua语法速记</title>
    <url>/2019/10/09/lua%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="基础语法速记"><a href="#基础语法速记" class="headerlink" title="基础语法速记"></a>基础语法速记</h2><ul>
<li>单行注释 --</li>
<li>多行注释 —[[]]—</li>
<li>数据类型，nil、boolean、number、string、、table、function、userdata和thread</li>
<li>不等于，~=</li>
<li>逻辑运算符，and，or，not</li>
</ul>
<a id="more"></a>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if-else-分支结构"><a href="#if-else-分支结构" class="headerlink" title="if else 分支结构"></a>if else 分支结构</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">score = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">80</span>) <span class="keyword">then</span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"优秀"</span>)</span><br><span class="line"><span class="keyword">elseif</span> (score &gt;= <span class="number">70</span>) <span class="keyword">then</span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"良好"</span>)</span><br><span class="line"><span class="keyword">elseif</span> (score &gt;= <span class="number">60</span>) <span class="keyword">then</span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"及格"</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"不及格"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><ol>
<li>if 后面都有一个 then</li>
<li>elseif 之间没有空格</li>
</ol>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">4<span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="Tips-1"><a href="#Tips-1" class="headerlink" title="Tips"></a>Tips</h4><ol>
<li>用逗号(,)</li>
<li>条件判断，小于等于10</li>
<li>Lua 只有 break,没有 continue</li>
</ol>
<h3 id="While-循环"><a href="#While-循环" class="headerlink" title="While 循环"></a>While 循环</h3><p>当条件满足时，执行循环</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">temp = <span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> (temp &gt; <span class="number">0</span>) <span class="keyword">do</span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"temp"</span>..temp)</span><br><span class="line">4temp = temp - <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="repeat-循环"><a href="#repeat-循环" class="headerlink" title="repeat 循环"></a>repeat 循环</h3><p>执行循环，直到条件满足</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">repeat</span></span><br><span class="line">4<span class="built_in">print</span>(num)</span><br><span class="line">4num = num <span class="number">-1</span></span><br><span class="line"><span class="keyword">until</span>(num==<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">myArray1 = &#123;&#125;</span><br><span class="line">myArray2 = &#123;<span class="string">"a"</span>, <span class="number">123</span>, <span class="literal">nil</span>, <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Tips-2"><a href="#Tips-2" class="headerlink" title="Tips"></a>Tips</h4><ol>
<li>长度不固定</li>
<li>数据类型不限制</li>
<li>下标从1开始</li>
</ol>
<p>获取长度<br>table.getn(myArray2)</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"Zak"</span></span><br></pre></td></tr></table></figure>
<p>详见<a href="">lua-字符串操作</a></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span><span class="params">(parm)</span></span> <span class="comment">-- 不需要声明返回值</span></span><br><span class="line">4<span class="built_in">print</span>(parm)</span><br><span class="line">4<span class="keyword">return</span> parm <span class="comment">-- 返回值</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="Tips-3"><a href="#Tips-3" class="headerlink" title="Tips"></a>Tips</h4><ol>
<li>先声明后调用</li>
<li>函数可以作为函数参数</li>
</ol>
<h2 id="表-table"><a href="#表-table" class="headerlink" title="表 table"></a>表 table</h2><h3 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表名 = &#123;&#125;</span></span><br><span class="line">myTable = &#123;&#125;</span><br><span class="line">myTable = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">"a"</span>, <span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表的赋值"><a href="#表的赋值" class="headerlink" title="表的赋值"></a>表的赋值</h3><pre><code>两种方式：数组形式赋值，键值对形式赋值
</code></pre><ol>
<li>以数组的形式赋值（就是数组）</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">myTable = &#123;&#125;</span><br><span class="line">myTable[<span class="number">1</span>] = <span class="string">"1"</span></span><br><span class="line">myTable[<span class="number">2</span>] = <span class="string">"2"</span></span><br><span class="line">myTable[<span class="number">3</span>] = <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(index, value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>下标从 1 开始</li>
<li>下标必须连续的</li>
</ul>
<ol>
<li>以键值对的形式赋值</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">myTable = &#123;&#125;</span><br><span class="line">myTable[<span class="string">"r"</span>] = <span class="string">"Red"</span></span><br><span class="line">myTable[<span class="string">"g"</span>] = <span class="string">"Green"</span></span><br><span class="line">myTable[<span class="string">"b"</span>] = <span class="string">"Blue"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">pairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ipairs 用于遍历数组，pairs 用于遍历数组或表，数组是表的一种</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MyMath.lua   -- 脚本的名称要和模块的名称一样</span></span><br><span class="line">MyMath = &#123;&#125;     <span class="comment">-- 定义模块</span></span><br><span class="line"></span><br><span class="line">MyMath.PI = <span class="number">3.1415</span>     <span class="comment">-- 定义常量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyMath.Add</span><span class="params">(first, second)</span></span>     <span class="comment">-- 定义公开方法</span></span><br><span class="line">    <span class="keyword">return</span> first+second</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span>            <span class="comment">-- 定义私有方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"这是私有方法"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MyMath   <span class="comment">-- 结束模块</span></span><br></pre></td></tr></table></figure>
<h3 id="模块使用"><a href="#模块使用" class="headerlink" title="模块使用"></a>模块使用</h3><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"MyMath"</span>)   <span class="comment">-- 加载模块</span></span><br><span class="line"><span class="built_in">print</span>(MyMath.Add(MyMath.PI, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">myMath = <span class="built_in">require</span>(<span class="string">"MyMath"</span>)  <span class="comment">-- 加载模块，别名使用</span></span><br><span class="line"><span class="built_in">print</span>(myMath.Add(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<h2 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">tableA = &#123;Province = <span class="string">"GuangDong"</span>, City = <span class="string">"Guangzhou"</span>&#125;	<span class="comment">-- 表A</span></span><br><span class="line">tableB = &#123;Block = <span class="string">"TianHe"</span>, Road = <span class="string">"JiShanLu"</span>&#125;			<span class="comment">-- 表B</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setmetatable</span>(tableA, tableB)	<span class="comment">-- 设置表B为表A的元表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getmetatable</span>(tableA)	<span class="comment">-- 获取表的元表，返回元表，nil表示没有包含元表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">getmetatable</span>(tableA))</span><br><span class="line"></span><br><span class="line">tableB.<span class="built_in">__index</span> = tableB	<span class="comment">-- 设置元表的索引</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tableA.Province, tableA.City, tableA.Block, tableA.Road)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Lua</category>
      </categories>
  </entry>
  <entry>
    <title>最大子数列和</title>
    <url>/2019/09/27/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E5%88%97%E5%92%8C/</url>
    <content><![CDATA[<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 100000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[MAX];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> maxSum;</span><br><span class="line">    <span class="keyword">int</span> tempSum;</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;count);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    maxSum = <span class="number">0</span>;</span><br><span class="line">    tempSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        tempSum += <span class="built_in">array</span>[i];</span><br><span class="line">        <span class="keyword">if</span> (tempSum &gt; maxSum) &#123;</span><br><span class="line">            maxSum = tempSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tempSum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            tempSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, maxSum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>最大子数列和</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-索引</title>
    <url>/2019/09/10/sql-%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<ul>
<li>索引是一种特殊的查询表，可以被数据库搜索引擎用来加速数据的检索。</li>
<li>索引能够提高 SELECT 查询和 WHERE 子句的速度，但是却降低了包含 UPDATE 语句或 INSERT 语句的数据输入过程的速度。</li>
<li>索引可以是唯一的。</li>
</ul>
<h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><ol>
<li>单列索引</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column_name);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>唯一索引</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">on</span> table_name (column_name);</span><br></pre></td></tr></table></figure>
<ol>
<li>聚簇索引</li>
</ol>
<p>聚簇索引在表中两个或更多的列的基础上建立。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">on</span> table_name (column1, column2);</span><br></pre></td></tr></table></figure>
<ol>
<li>隐式索引</li>
</ol>
<p>隐式索引由数据库服务器在创建某些对象的时候自动生成。例如，对于主键约束和唯一约束，数据库服务器就会自动创建索引。</p>
<h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Drop</span> <span class="keyword">Index</span> index_name <span class="keyword">On</span> table_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> table_name.index_name;</span><br></pre></td></tr></table></figure>
<h2 id="什么时候应当避免使用索引？"><a href="#什么时候应当避免使用索引？" class="headerlink" title="什么时候应当避免使用索引？"></a>什么时候应当避免使用索引？</h2><ul>
<li>小的数据表不应当使用索引；</li>
<li>需要频繁进行大批量的更新或者插入操作的表；</li>
<li>如果列中包含大数或者 NULL 值，不宜创建索引；</li>
<li>频繁操作的列不宜创建索引。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-约束</title>
    <url>/2019/09/08/sql-%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h2 id="常用的约束"><a href="#常用的约束" class="headerlink" title="常用的约束"></a>常用的约束</h2><ul>
<li><a href="#not-null-%e9%9d%9e%e7%a9%ba%e7%ba%a6%e6%9d%9f">NOT NULL 约束</a></li>
<li><a href="#unique-%e5%94%af%e4%b8%80%e7%ba%a6%e6%9d%9f">UNIQUE 约束</a></li>
<li><a href="#primary-key-%e4%b8%bb%e9%94%ae%e7%ba%a6%e6%9d%9f">主键约束</a></li>
<li><a href="#foreign-key-%e5%a4%96%e9%94%ae%e7%ba%a6%e6%9d%9f">外键约束</a></li>
<li><a href="#default-%e7%ba%a6%e6%9d%9f">DEFAULT 约束</a></li>
<li><a href="#check-%e7%ba%a6%e6%9d%9f">CHECK 约束</a></li>
</ul>
<h2 id="创建约束"><a href="#创建约束" class="headerlink" title="创建约束"></a>创建约束</h2><ol>
<li>创建表时指定约束</li>
</ol>
<a id="more"></a>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">    column_name1 data_type(<span class="keyword">size</span>) <span class="keyword">constraints</span>,</span><br><span class="line">    column_name2 data_type(<span class="keyword">size</span>) <span class="keyword">constraints</span>,</span><br><span class="line">    column_name3 data_type(<span class="keyword">size</span>) <span class="keyword">constraints</span>,</span><br><span class="line">    ....</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ol>
<li>创建表后指定约束</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> constraint_key;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 添加一个多个列的 UNIQUE 约束，并命名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> constraint_name constraint_key;</span><br></pre></td></tr></table></figure>
<h2 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> constraint_name;</span><br></pre></td></tr></table></figure>
<h2 id="NOT-NULL-非空约束"><a href="#NOT-NULL-非空约束" class="headerlink" title="NOT NULL 非空约束"></a>NOT NULL 非空约束</h2><p>在默认的情况下，表的列接受 NULL 值。<br>NOT NULL 约束强制列不接受 NULL 值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="UNIQUE-唯一约束"><a href="#UNIQUE-唯一约束" class="headerlink" title="UNIQUE 唯一约束"></a>UNIQUE 唯一约束</h2><ul>
<li>UNIQUE 约束唯一标识数据库表中的每条记录。</li>
<li>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。</li>
<li>PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。</li>
<li>每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</li>
</ul>
<h3 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加约束</span></span><br><span class="line"><span class="comment">-- 1. 定义列时，添加约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 2. 定义好所有列后，添加约束,可添加一个多个列的约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> uc_PersonID <span class="keyword">UNIQUE</span> (P_Id,LastName)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后添加约束</span></span><br><span class="line"><span class="comment">-- 1. 添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (P_Id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 添加一个多个列的 UNIQUE 约束，并命名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uc_PersonID <span class="keyword">UNIQUE</span> (P_Id,LastName);</span><br></pre></td></tr></table></figure>
<h3 id="撤销唯一约束"><a href="#撤销唯一约束" class="headerlink" title="撤销唯一约束"></a>撤销唯一约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> uc_PersonID</span><br></pre></td></tr></table></figure>
<h2 id="PRIMARY-KEY-主键约束"><a href="#PRIMARY-KEY-主键约束" class="headerlink" title="PRIMARY KEY 主键约束"></a>PRIMARY KEY 主键约束</h2><p>主键必须包含唯一的值。<br>主键列不能包含 NULL 值。<br>每个表都应该有一个主键，并且每个表只能有一个主键。</p>
<h3 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加约束</span></span><br><span class="line"><span class="comment">-- 1. 定义列时，添加约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 2. 定义好所有列后，添加约束,可添加一个多个列的约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> pk_PersonID PRIMARY <span class="keyword">KEY</span> (P_Id,LastName)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后添加约束</span></span><br><span class="line"><span class="comment">-- 1. 添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (P_Id);</span><br><span class="line"><span class="comment">-- 2. 添加一个多个列的 PRIMARY KEY 约束，并命名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_PersonID PRIMARY <span class="keyword">KEY</span> (P_Id,LastName);</span><br></pre></td></tr></table></figure>
<h3 id="撤销主键约束"><a href="#撤销主键约束" class="headerlink" title="撤销主键约束"></a>撤销主键约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> pk_PersonID;</span><br></pre></td></tr></table></figure>
<h2 id="FOREIGN-KEY-外键约束"><a href="#FOREIGN-KEY-外键约束" class="headerlink" title="FOREIGN KEY 外键约束"></a>FOREIGN KEY 外键约束</h2><p>一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。</p>
<h3 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加约束</span></span><br><span class="line"><span class="comment">-- 1. 定义列时，添加约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">    O_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    OrderNo <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> <span class="keyword">REFERENCES</span> Persons(P_Id)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 2. 定义好所有列后，添加约束,可添加一个多个列的约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line">(</span><br><span class="line">    O_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    OrderNo <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    P_Id <span class="built_in">int</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (O_Id),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> fk_PerOrders <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id)</span><br><span class="line">    <span class="keyword">REFERENCES</span> Persons(P_Id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后添加约束</span></span><br><span class="line"><span class="comment">-- 1. 添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id)</span><br><span class="line"><span class="keyword">REFERENCES</span> Persons(P_Id);</span><br><span class="line"><span class="comment">-- 2. 添加一个多个列的 FOREIGN KEY 约束，并命名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_PerOrders</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (P_Id)</span><br><span class="line"><span class="keyword">REFERENCES</span> Persons(P_Id);</span><br></pre></td></tr></table></figure>
<h3 id="撤销外键约束"><a href="#撤销外键约束" class="headerlink" title="撤销外键约束"></a>撤销外键约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Orders</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> fk_PerOrders;</span><br></pre></td></tr></table></figure>
<h2 id="DEFAULT-约束"><a href="#DEFAULT-约束" class="headerlink" title="DEFAULT 约束"></a>DEFAULT 约束</h2><h3 id="添加默认约束"><a href="#添加默认约束" class="headerlink" title="添加默认约束"></a>添加默认约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">'Sandnes'</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 创建表后添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> DF_Persons_City <span class="keyword">DEFAULT</span>(<span class="string">'SANDNES'</span>) <span class="keyword">FOR</span> City;</span><br></pre></td></tr></table></figure>
<h3 id="撤销默认约束"><a href="#撤销默认约束" class="headerlink" title="撤销默认约束"></a>撤销默认约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> City <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure>
<h2 id="CHECK-约束"><a href="#CHECK-约束" class="headerlink" title="CHECK 约束"></a>CHECK 约束</h2><p>CHECK 约束用于限制列中的值的范围。</p>
<h3 id="添加检查约束"><a href="#添加检查约束" class="headerlink" title="添加检查约束"></a>添加检查约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表时添加约束</span></span><br><span class="line"><span class="comment">-- 1. 定义列时，添加约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span> (P_Id&gt;<span class="number">0</span>),</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 2. 定义好所有列后，添加约束,可添加一个多个列的约束</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    P_Id <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> chk_Person <span class="keyword">CHECK</span> (P_Id&gt;<span class="number">0</span> <span class="keyword">AND</span> City=<span class="string">'Sandnes'</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后添加约束</span></span><br><span class="line"><span class="comment">-- 1. 添加约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CHECK</span> (P_Id&gt;<span class="number">0</span>);</span><br><span class="line"><span class="comment">-- 2. 添加一个多个列的 CHECK 约束，并命名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> chk_Person <span class="keyword">CHECK</span> (P_Id&gt;<span class="number">0</span> <span class="keyword">AND</span> City=<span class="string">'Sandnes'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="撤销检查约束"><a href="#撤销检查约束" class="headerlink" title="撤销检查约束"></a>撤销检查约束</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> chk_Person;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-别名</title>
    <url>/2019/09/08/sql-%E5%88%AB%E5%90%8D/</url>
    <content><![CDATA[<ul>
<li>SQL 别名用于为表或表中的列提供临时名称，数据库中的实际表名不会更改。</li>
<li>SQL 一个别名只存在于查询期间。</li>
</ul>
<h2 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">AS</span> alias_name</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
<h2 id="表的别名"><a href="#表的别名" class="headerlink" title="表的别名"></a>表的别名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_name...</span><br><span class="line"><span class="keyword">FROM</span> table_name <span class="keyword">AS</span> alias_name;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-基础语法(数据库、表相关)</title>
    <url>/2019/09/08/sql-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%951/</url>
    <content><![CDATA[<h2 id="Use语句"><a href="#Use语句" class="headerlink" title="Use语句"></a>Use语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">USE</span> database_name;</span><br></pre></td></tr></table></figure>
<h2 id="CREATE-TABLE-创建表"><a href="#CREATE-TABLE-创建表" class="headerlink" title="CREATE TABLE 创建表"></a>CREATE TABLE 创建表</h2><a id="more"></a>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">column_name1 data_type(<span class="keyword">size</span>),</span><br><span class="line">column_name2 data_type(<span class="keyword">size</span>),</span><br><span class="line">column_name3 data_type(<span class="keyword">size</span>),</span><br><span class="line">....</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="DROP-TABLE-删除表"><a href="#DROP-TABLE-删除表" class="headerlink" title="DROP TABLE 删除表"></a>DROP TABLE 删除表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br></pre></td></tr></table></figure>
<h2 id="ALTER-TABLE-修改表"><a href="#ALTER-TABLE-修改表" class="headerlink" title="ALTER TABLE 修改表"></a>ALTER TABLE 修改表</h2><h3 id="表的重命名"><a href="#表的重命名" class="headerlink" title="表的重命名"></a>表的重命名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">RENAME</span> <span class="keyword">TO</span> new_table_name;</span><br></pre></td></tr></table></figure>
<h3 id="表记录列的添加、删除、修改"><a href="#表记录列的添加、删除、修改" class="headerlink" title="表记录列的添加、删除、修改"></a>表记录列的添加、删除、修改</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name &#123;<span class="keyword">ADD</span>|<span class="keyword">DROP</span>|<span class="keyword">MODIFY</span>&#125; column_name &#123;data_ype&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="CREATE-INDEX-创建索引"><a href="#CREATE-INDEX-创建索引" class="headerlink" title="CREATE INDEX 创建索引"></a>CREATE INDEX 创建索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name ( column1, column2,...columnN);</span><br></pre></td></tr></table></figure>
<h2 id="DROP-INDEX-删除索引"><a href="#DROP-INDEX-删除索引" class="headerlink" title="DROP INDEX 删除索引"></a>DROP INDEX 删除索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-空值</title>
    <url>/2019/09/08/sql-%E7%A9%BA%E5%80%BC/</url>
    <content><![CDATA[<ul>
<li>NULL 用于表示缺失的值。</li>
<li>值为 NULL 的字段没有值。</li>
<li>NULL 值与 0 或者包含空白（spaces）的字段是不同的</li>
</ul>
<h2 id="测试-NULL-值"><a href="#测试-NULL-值" class="headerlink" title="测试 NULL 值"></a>测试 NULL 值</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- IS NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- IS NOT NULL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-基础语法(数据行、列相关)</title>
    <url>/2019/09/05/sql-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%952/</url>
    <content><![CDATA[<p><strong>下面语法 SQL Server 2008 R2 可以正常运行。</strong></p>
<h2 id="SELECT-语句"><a href="#SELECT-语句" class="headerlink" title="SELECT 语句"></a>SELECT 语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="DISTINCT-关键字"><a href="#DISTINCT-关键字" class="headerlink" title="DISTINCT 关键字"></a>DISTINCT 关键字</h3><p>用于返回唯一不同的值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure>
<h3 id="ORDER-BY-关键字"><a href="#ORDER-BY-关键字" class="headerlink" title="ORDER BY 关键字"></a>ORDER BY 关键字</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name <span class="keyword">ASC</span>/<span class="keyword">DESC</span>, column_name <span class="keyword">ASC</span>/<span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<h3 id="TOP-关键字"><a href="#TOP-关键字" class="headerlink" title="TOP 关键字"></a>TOP 关键字</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 返回前五行记录</span></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">5</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="comment">-- 返回前百分之五的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">5</span> <span class="keyword">PERCENT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 和 ORDER BY 结合返回倒数记录</span></span><br></pre></td></tr></table></figure>
<h2 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure>
<p>SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。<br>如果是数值字段，不要使用引号。</p>
<p>WHERE 子句中的运算符</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:left">等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;(!=)</td>
<td style="text-align:left">不等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:left">大于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:left">小于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:left">大于等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:left">小于等于</td>
</tr>
<tr>
<td style="text-align:center">BETWEEN</td>
<td style="text-align:left">在某个范围内</td>
</tr>
<tr>
<td style="text-align:center">LIKE</td>
<td style="text-align:left">搜索某种模式</td>
</tr>
<tr>
<td style="text-align:center">IN</td>
<td style="text-align:left">指定针对某个列的多个可能值</td>
</tr>
</tbody>
</table>
</div>
<h3 id="LIKE-运算符"><a href="#LIKE-运算符" class="headerlink" title="LIKE 运算符"></a>LIKE 运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> pattern;</span><br></pre></td></tr></table></figure>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">通配符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:left">替代 0 个或多个字符</td>
</tr>
<tr>
<td style="text-align:center">_</td>
<td style="text-align:left">替代一个字符</td>
</tr>
<tr>
<td style="text-align:center">[charlist]</td>
<td style="text-align:left">字符列表中的任何单一字符</td>
</tr>
<tr>
<td style="text-align:center"><sup><a href="#fn_charlist" id="reffn_charlist">charlist</a></sup>或[!charlist]</td>
<td style="text-align:left">不在字符列表中的任何单一字符</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>LIKE ‘%a’: 以a结尾的记录</li>
<li>LIKE ‘a%’:以a开头的记录</li>
<li>LIKE ‘%a%’: 含有a的记录</li>
<li>LIKE ‘_a_‘: 三位且中间字母是a的记录</li>
<li>LIKE ‘_a’: 两位且结尾字母是a的记录</li>
<li>LIKE ‘a_’: 两位且开头字母是a的记录</li>
<li>LIKE ‘[ab]%’: 以a或b开头的记录</li>
<li>LIKE ‘<sup><a href="#fn_ab" id="reffn_ab">ab</a></sup>%’: 不以a或b开头的记录</li>
</ul>
<h3 id="IN-运算符"><a href="#IN-运算符" class="headerlink" title="IN 运算符"></a>IN 运算符</h3><p>与 = 运算符相识，但可以匹配多个值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (value1, value2, ...);</span><br></pre></td></tr></table></figure>
<h3 id="BETWEEN-运算符"><a href="#BETWEEN-运算符" class="headerlink" title="BETWEEN 运算符"></a>BETWEEN 运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br></pre></td></tr></table></figure>
<p>值可以是数值、文本或者日期。</p>
<h3 id="AND、OR、NOT-运算符"><a href="#AND、OR、NOT-运算符" class="headerlink" title="AND、OR、NOT 运算符"></a>AND、OR、NOT 运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- AND</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition1 <span class="keyword">AND</span> condition2 ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- OR</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> condition1 <span class="keyword">OR</span> condition2 ...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- NOT</span></span><br><span class="line"><span class="keyword">SELECT</span> column1, column2, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> condition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">AND</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">OR</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">NOT</span> <span class="keyword">LIKE</span> pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">NOT</span> <span class="keyword">IN</span> (value1, value2, ...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2;</span><br></pre></td></tr></table></figure>
<h2 id="INSERT-INTO-语句"><a href="#INSERT-INTO-语句" class="headerlink" title="INSERT INTO 语句"></a>INSERT INTO 语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3,...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1, column2, column3, ...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>
<h2 id="UPDATE-语句"><a href="#UPDATE-语句" class="headerlink" title="UPDATE 语句"></a>UPDATE 语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1=value1, column2=value2,...</span><br><span class="line"><span class="keyword">WHERE</span> some_column = some_value;</span><br></pre></td></tr></table></figure>
<p><em>注：不加 WHERE 子句将修改全部记录</em></p>
<h2 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> some_column = some_value;</span><br></pre></td></tr></table></figure>
<p><em>注：不加 WHERE 子句将删除全部记录</em></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>C# ADO .NET DataSet</title>
    <url>/2019/09/03/csharp-ado-net-dataset/</url>
    <content><![CDATA[<p>表示数据在内存中的缓存。</p>
<h2 id="常用属性、方法"><a href="#常用属性、方法" class="headerlink" title="常用属性、方法"></a>常用属性、方法</h2><ol>
<li>Tables<br>获取包含在 DataSet 中的表的集合。</li>
</ol>
<a id="more"></a>
<ol>
<li>Clear()<br>通过移除所有表中的所有行来清除任何数据的 DataSet。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DataSet dataSet = <span class="keyword">new</span> DataSet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (SqlConnection sqlConnection</span><br><span class="line">    = <span class="keyword">new</span> SqlConnection(connectionString.ConnectionString)) &#123;</span><br><span class="line">    SqlDataAdapter sqlDataAdapter = <span class="keyword">new</span> SqlDataAdapter();</span><br><span class="line">    sqlDataAdapter.SelectCommand = <span class="keyword">new</span> SqlCommand(sql, sqlConnection);</span><br><span class="line"></span><br><span class="line">    sqlDataAdapter.Fill(dataSet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (DataTable table <span class="keyword">in</span> dataSet.Tables) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (DataRow row <span class="keyword">in</span> table.Rows) &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"<span class="subst">&#123;row[<span class="number">0</span>]&#125;</span> <span class="subst">&#123;row[<span class="string">"PersonName"</span>]&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>DataTable : 表示内存中数据的一个表。</li>
<li>DataRow : 表示 DataTable 中的一行数据。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>ADO .NET</tag>
      </tags>
  </entry>
  <entry>
    <title>C# ADO .NET SqlClient</title>
    <url>/2019/09/02/csharp-ado-net-sqlclient/</url>
    <content><![CDATA[<p>System.Data.SqlClient 命名空间是用于 SQL Server 的 .NET 数据提供程序。</p>
<h2 id="SqlConnectionStringBuilder"><a href="#SqlConnectionStringBuilder" class="headerlink" title="SqlConnectionStringBuilder"></a>SqlConnectionStringBuilder</h2><a id="more"></a>
<p>为创建和管理由 SqlConnection 类使用的连接字符串的内容提供了一种简单方法。</p>
<h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><ol>
<li><p>ConnectionString<br>获取或设置与 DbConnectionStringBuilder 相关联的连接字符串。</p>
</li>
<li><p>DataSource<br>获取或设置要连接到的 SQL Server 实例的名称或网络地址。</p>
</li>
<li><p>InitialCatalog<br>获取或设置与该连接关联的数据库的名称。</p>
</li>
<li><p>IntegratedSecurity<br>获取或设置一个布尔值，该值指示是否在连接中指定用户 ID 和密码（值为 false 时），或者是否使用当前的 Windows 帐户凭据进行身份验证（值为 true 时）。</p>
</li>
<li><p>UserID<br>获取或设置连接到 SQL Server 时要使用的用户 ID。</p>
</li>
<li><p>Password<br>获取或设置 SQL Server 帐户的密码。</p>
</li>
</ol>
<p>用例</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SqlConnectionStringBuilder connectionString</span><br><span class="line">    = <span class="keyword">new</span> SqlConnectionStringBuilder();</span><br><span class="line"></span><br><span class="line">connectionString.DataSource = <span class="string">"(local)"</span>;</span><br><span class="line"></span><br><span class="line">connectionString.InitialCatalog = <span class="string">"PersonDatabase"</span>;</span><br><span class="line"></span><br><span class="line">connectionString.IntegratedSecurity = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connectionString.UserID = "myUserID";</span></span><br><span class="line"><span class="comment">// connectionString.Password = "myPassword";</span></span><br><span class="line"></span><br><span class="line">Console.WriteLine(connectionString.ConnectionString);</span><br></pre></td></tr></table></figure>
<h2 id="SqlConnection"><a href="#SqlConnection" class="headerlink" title="SqlConnection"></a>SqlConnection</h2><p>表示到 SQL Server 数据库的连接。 此类不能被继承。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">SqlConnection sqlConnection = <span class="keyword">new</span> SqlConnection(connectionString.ConnectionString);</span><br><span class="line">sqlConnection.Open();</span><br><span class="line">sqlConnection.Close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 using()</span></span><br><span class="line"><span class="keyword">using</span> (SqlConnection sqlConnection</span><br><span class="line">    = <span class="keyword">new</span> SqlConnection(connectionString.ConnectionString)) &#123;</span><br><span class="line">    sqlConnection.Open();</span><br><span class="line">    <span class="comment">// do something ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SqlCommand"><a href="#SqlCommand" class="headerlink" title="SqlCommand"></a>SqlCommand</h2><p>表示要对 SQL Server 数据库执行的一个 Transact-SQL 语句或存储过程。 此类不能被继承。</p>
<h3 id="常用属性、方法"><a href="#常用属性、方法" class="headerlink" title="常用属性、方法"></a>常用属性、方法</h3><ol>
<li><p>Parameters<br>获取 SqlParameterCollection。用于执行SQL语句的参数。</p>
</li>
<li><p>ExecuteNonQuery()<br>对连接执行 Transact-SQL 语句并返回受影响的行数。没有修改返回-1。</p>
</li>
<li><p>ExecuteScalar()<br>执行查询，并返回由查询返回的结果集中的第一行的第一列。其他列或行将被忽略。</p>
</li>
<li><p>ExecuteReader()<br>将 CommandText 发送到 Connection，并生成 SqlDataReader。</p>
</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> sql = <span class="string">"SELECT * FROM Person WHERE PersonName = @name"</span>;</span><br><span class="line">SqlParameter[] sqlParameters = &#123;</span><br><span class="line">    <span class="keyword">new</span> SqlParameter(<span class="string">"name"</span>, <span class="string">"方法"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> (SqlConnection sqlConnection</span><br><span class="line">    = <span class="keyword">new</span> SqlConnection(connectionString.ConnectionString)) &#123;</span><br><span class="line">    SqlCommand sqlCommand = <span class="keyword">new</span> SqlCommand(sql, sqlConnection);</span><br><span class="line">    sqlCommand.Parameters.AddRange(sqlParameters);</span><br><span class="line"></span><br><span class="line">    sqlConnection.Open();</span><br><span class="line">    Console.WriteLine(sqlCommand.ExecuteNonQuery());</span><br><span class="line">    Console.WriteLine(sqlCommand.ExecuteScalar());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SqlDataReader"><a href="#SqlDataReader" class="headerlink" title="SqlDataReader"></a>SqlDataReader</h2><p>提供一种从 SQL Server 数据库中读取只进的行流的方式。此类不能被继承。<br>若要创建 SqlDataReader, 必须调用SqlCommand对象的 ExecuteReader 方法, 而不是直接使用构造函数。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">string</span> sql = <span class="string">"SELECT * FROM Person"</span>;</span><br><span class="line"><span class="keyword">using</span> (SqlConnection sqlConnection</span><br><span class="line">    = <span class="keyword">new</span> SqlConnection(connectionString.ConnectionString)) &#123;</span><br><span class="line">    SqlCommand sqlCommand = <span class="keyword">new</span> SqlCommand(sql, sqlConnection);</span><br><span class="line"></span><br><span class="line">    sqlConnection.Open();</span><br><span class="line">    SqlDataReader dataReader = sqlCommand.ExecuteReader();</span><br><span class="line">    <span class="keyword">while</span> (dataReader.Read()) &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"<span class="subst">&#123;dataReader[<span class="number">0</span>]&#125;</span> : <span class="subst">&#123;dataReader[<span class="string">"PersonName"</span>]&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dataReader.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SqlDataAdapter"><a href="#SqlDataAdapter" class="headerlink" title="SqlDataAdapter"></a>SqlDataAdapter</h2><p>表示用于填充 DataSet 和更新 SQL Server 数据库的一组数据命令和一个数据库连接。 此类不能被继承。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DataSet dataSet = <span class="keyword">new</span> DataSet();</span><br><span class="line"><span class="keyword">using</span> (SqlConnection sqlConnection</span><br><span class="line">    = <span class="keyword">new</span> SqlConnection(connectionString.ConnectionString)) &#123;</span><br><span class="line">    SqlDataAdapter sqlDataAdapter = <span class="keyword">new</span> SqlDataAdapter();</span><br><span class="line">    sqlDataAdapter.SelectCommand = <span class="keyword">new</span> SqlCommand(sql, sqlConnection);</span><br><span class="line">    sqlDataAdapter.Fill(dataSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>ADO .NET</tag>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>C# ADO .NET 连接字符串</title>
    <url>/2019/09/02/csharp-ado-net-%E8%BF%9E%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>连接字符串包含作为参数从数据提供程序传递到数据源的初始化信息。</p>
<h2 id="连接字符串的语法"><a href="#连接字符串的语法" class="headerlink" title="连接字符串的语法"></a>连接字符串的语法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">关键字=值;关键字=值;...</span><br></pre></td></tr></table></figure>
<ol>
<li>关键字不区分大小写；值根据数据源不同，可能区分大小写。</li>
<li>关键字和值可以包含空格字符。关键字和无引号值中会忽略前后空格。</li>
<li>如果值包含分号、Unicode控制字符或前导或尾随空格，则必须用单引号或双引号将其引起来。</li>
<li>封闭字符不能出现在它所包含的值中。因此，包含单引号的值只能用双引号引起来，反之亦然。还可以通过将其中两个字符一起使用来转义封闭字符。</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>ADO .NET</tag>
      </tags>
  </entry>
  <entry>
    <title>ASCII码表</title>
    <url>/2019/08/30/ascii%E7%A0%81%E8%A1%A8/</url>
    <content><![CDATA[<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Bin</th>
<th style="text-align:center">Oct</th>
<th style="text-align:center">Dec</th>
<th style="text-align:center">Hex</th>
<th style="text-align:center">缩写/字符</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0000 0000</td>
<td style="text-align:center">00</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0x00</td>
<td style="text-align:center">NUL(null)</td>
<td style="text-align:center">空字符</td>
</tr>
<tr>
<td style="text-align:center">0000 0001</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0x01</td>
<td style="text-align:center">SOH(start of headline)</td>
<td style="text-align:center">标题开始</td>
</tr>
<tr>
<td style="text-align:center">0000 0010</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">0x02</td>
<td style="text-align:center">STX (start of text)</td>
<td style="text-align:center">正文开始</td>
</tr>
<tr>
<td style="text-align:center">0000 0011</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">0x03</td>
<td style="text-align:center">ETX (end of text)</td>
<td style="text-align:center">正文结束</td>
</tr>
<tr>
<td style="text-align:center">0000 0100</td>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">0x04</td>
<td style="text-align:center">EOT (end of transmission)</td>
<td style="text-align:center">传输结束</td>
</tr>
<tr>
<td style="text-align:center">0000 0101</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">0x05</td>
<td style="text-align:center">ENQ (enquiry)</td>
<td style="text-align:center">请求</td>
</tr>
<tr>
<td style="text-align:center">0000 0110</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">0x06</td>
<td style="text-align:center">ACK (acknowledge)</td>
<td style="text-align:center">收到通知</td>
</tr>
<tr>
<td style="text-align:center">0000 0111</td>
<td style="text-align:center">7</td>
<td style="text-align:center">7</td>
<td style="text-align:center">0x07</td>
<td style="text-align:center">BEL (bell)</td>
<td style="text-align:center">响铃</td>
</tr>
<tr>
<td style="text-align:center">0000 1000</td>
<td style="text-align:center">10</td>
<td style="text-align:center">8</td>
<td style="text-align:center">0x08</td>
<td style="text-align:center">BS (backspace)</td>
<td style="text-align:center">退格</td>
</tr>
<tr>
<td style="text-align:center">0000 1001</td>
<td style="text-align:center">11</td>
<td style="text-align:center">9</td>
<td style="text-align:center">0x09</td>
<td style="text-align:center">HT (horizontal tab)</td>
<td style="text-align:center">水平制表符</td>
</tr>
<tr>
<td style="text-align:center">0000 1010</td>
<td style="text-align:center">12</td>
<td style="text-align:center">10</td>
<td style="text-align:center">0x0A</td>
<td style="text-align:center">LF (NL line feed, new line)</td>
<td style="text-align:center">换行键</td>
</tr>
<tr>
<td style="text-align:center">0000 1011</td>
<td style="text-align:center">13</td>
<td style="text-align:center">11</td>
<td style="text-align:center">0x0B</td>
<td style="text-align:center">VT (vertical tab)</td>
<td style="text-align:center">垂直制表符</td>
</tr>
<tr>
<td style="text-align:center">0000 1100</td>
<td style="text-align:center">14</td>
<td style="text-align:center">12</td>
<td style="text-align:center">0x0C</td>
<td style="text-align:center">FF (NP form feed, new page)</td>
<td style="text-align:center">换页键</td>
</tr>
<tr>
<td style="text-align:center">0000 1101</td>
<td style="text-align:center">15</td>
<td style="text-align:center">13</td>
<td style="text-align:center">0x0D</td>
<td style="text-align:center">CR (carriage return)</td>
<td style="text-align:center">回车键</td>
</tr>
<tr>
<td style="text-align:center">0000 1110</td>
<td style="text-align:center">16</td>
<td style="text-align:center">14</td>
<td style="text-align:center">0x0E</td>
<td style="text-align:center">SO (shift out)</td>
<td style="text-align:center">不用切换</td>
</tr>
<tr>
<td style="text-align:center">0000 1111</td>
<td style="text-align:center">17</td>
<td style="text-align:center">15</td>
<td style="text-align:center">0x0F</td>
<td style="text-align:center">SI (shift in)</td>
<td style="text-align:center">启用切换</td>
</tr>
<tr>
<td style="text-align:center">0001 0000</td>
<td style="text-align:center">20</td>
<td style="text-align:center">16</td>
<td style="text-align:center">0x10</td>
<td style="text-align:center">DLE (data link escape)</td>
<td style="text-align:center">数据链路转义</td>
</tr>
<tr>
<td style="text-align:center">0001 0001</td>
<td style="text-align:center">21</td>
<td style="text-align:center">17</td>
<td style="text-align:center">0x11</td>
<td style="text-align:center">DC1 (device control 1)</td>
<td style="text-align:center">设备控制1</td>
</tr>
<tr>
<td style="text-align:center">0001 0010</td>
<td style="text-align:center">22</td>
<td style="text-align:center">18</td>
<td style="text-align:center">0x12</td>
<td style="text-align:center">DC2 (device control 2)</td>
<td style="text-align:center">设备控制2</td>
</tr>
<tr>
<td style="text-align:center">0001 0011</td>
<td style="text-align:center">23</td>
<td style="text-align:center">19</td>
<td style="text-align:center">0x13</td>
<td style="text-align:center">DC3 (device control 3)</td>
<td style="text-align:center">设备控制3</td>
</tr>
<tr>
<td style="text-align:center">0001 0100</td>
<td style="text-align:center">24</td>
<td style="text-align:center">20</td>
<td style="text-align:center">0x14</td>
<td style="text-align:center">DC4 (device control 4)</td>
<td style="text-align:center">设备控制4</td>
</tr>
<tr>
<td style="text-align:center">0001 0101</td>
<td style="text-align:center">25</td>
<td style="text-align:center">21</td>
<td style="text-align:center">0x15</td>
<td style="text-align:center">NAK (negative acknowledge)</td>
<td style="text-align:center">拒绝接收</td>
</tr>
<tr>
<td style="text-align:center">0001 0110</td>
<td style="text-align:center">26</td>
<td style="text-align:center">22</td>
<td style="text-align:center">0x16</td>
<td style="text-align:center">SYN (synchronous idle)</td>
<td style="text-align:center">同步空闲</td>
</tr>
<tr>
<td style="text-align:center">0001 0111</td>
<td style="text-align:center">27</td>
<td style="text-align:center">23</td>
<td style="text-align:center">0x17</td>
<td style="text-align:center">ETB (end of trans. block)</td>
<td style="text-align:center">结束传输块</td>
</tr>
<tr>
<td style="text-align:center">0001 1000</td>
<td style="text-align:center">30</td>
<td style="text-align:center">24</td>
<td style="text-align:center">0x18</td>
<td style="text-align:center">CAN (cancel)</td>
<td style="text-align:center">取消</td>
</tr>
<tr>
<td style="text-align:center">0001 1001</td>
<td style="text-align:center">31</td>
<td style="text-align:center">25</td>
<td style="text-align:center">0x19</td>
<td style="text-align:center">EM (end of medium)</td>
<td style="text-align:center">媒介结束</td>
</tr>
<tr>
<td style="text-align:center">0001 1010</td>
<td style="text-align:center">32</td>
<td style="text-align:center">26</td>
<td style="text-align:center">0x1A</td>
<td style="text-align:center">SUB (substitute)</td>
<td style="text-align:center">代替</td>
</tr>
<tr>
<td style="text-align:center">0001 1011</td>
<td style="text-align:center">33</td>
<td style="text-align:center">27</td>
<td style="text-align:center">0x1B</td>
<td style="text-align:center">ESC (escape)</td>
<td style="text-align:center">换码(溢出)</td>
</tr>
<tr>
<td style="text-align:center">0001 1100</td>
<td style="text-align:center">34</td>
<td style="text-align:center">28</td>
<td style="text-align:center">0x1C</td>
<td style="text-align:center">FS (file separator)</td>
<td style="text-align:center">文件分隔符</td>
</tr>
<tr>
<td style="text-align:center">0001 1101</td>
<td style="text-align:center">35</td>
<td style="text-align:center">29</td>
<td style="text-align:center">0x1D</td>
<td style="text-align:center">GS (group separator)</td>
<td style="text-align:center">分组符</td>
</tr>
<tr>
<td style="text-align:center">0001 1110</td>
<td style="text-align:center">36</td>
<td style="text-align:center">30</td>
<td style="text-align:center">0x1E</td>
<td style="text-align:center">RS (record separator)</td>
<td style="text-align:center">记录分隔符</td>
</tr>
<tr>
<td style="text-align:center">0001 1111</td>
<td style="text-align:center">37</td>
<td style="text-align:center">31</td>
<td style="text-align:center">0x1F</td>
<td style="text-align:center">US (unit separator)</td>
<td style="text-align:center">单元分隔符</td>
</tr>
<tr>
<td style="text-align:center">0010 0000</td>
<td style="text-align:center">40</td>
<td style="text-align:center">32</td>
<td style="text-align:center">0x20</td>
<td style="text-align:center">(space)</td>
<td style="text-align:center">空格</td>
</tr>
<tr>
<td style="text-align:center">0010 0001</td>
<td style="text-align:center">41</td>
<td style="text-align:center">33</td>
<td style="text-align:center">0x21</td>
<td style="text-align:center">!</td>
<td style="text-align:center">叹号</td>
</tr>
<tr>
<td style="text-align:center">0010 0010</td>
<td style="text-align:center">42</td>
<td style="text-align:center">34</td>
<td style="text-align:center">0x22</td>
<td style="text-align:center">“</td>
<td style="text-align:center">双引号</td>
</tr>
<tr>
<td style="text-align:center">0010 0011</td>
<td style="text-align:center">43</td>
<td style="text-align:center">35</td>
<td style="text-align:center">0x23</td>
<td style="text-align:center">#</td>
<td style="text-align:center">井号</td>
</tr>
<tr>
<td style="text-align:center">0010 0100</td>
<td style="text-align:center">44</td>
<td style="text-align:center">36</td>
<td style="text-align:center">0x24</td>
<td style="text-align:center">$</td>
<td style="text-align:center">美元符</td>
</tr>
<tr>
<td style="text-align:center">0010 0101</td>
<td style="text-align:center">45</td>
<td style="text-align:center">37</td>
<td style="text-align:center">0x25</td>
<td style="text-align:center">%</td>
<td style="text-align:center">百分号</td>
</tr>
<tr>
<td style="text-align:center">0010 0110</td>
<td style="text-align:center">46</td>
<td style="text-align:center">38</td>
<td style="text-align:center">0x26</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">和号</td>
</tr>
<tr>
<td style="text-align:center">0010 0111</td>
<td style="text-align:center">47</td>
<td style="text-align:center">39</td>
<td style="text-align:center">0x27</td>
<td style="text-align:center">‘</td>
<td style="text-align:center">闭单引号</td>
</tr>
<tr>
<td style="text-align:center">0010 1000</td>
<td style="text-align:center">50</td>
<td style="text-align:center">40</td>
<td style="text-align:center">0x28</td>
<td style="text-align:center">(</td>
<td style="text-align:center">开括号</td>
</tr>
<tr>
<td style="text-align:center">0010 1001</td>
<td style="text-align:center">51</td>
<td style="text-align:center">41</td>
<td style="text-align:center">0x29</td>
<td style="text-align:center">)</td>
<td style="text-align:center">闭括号</td>
</tr>
<tr>
<td style="text-align:center">0010 1010</td>
<td style="text-align:center">52</td>
<td style="text-align:center">42</td>
<td style="text-align:center">0x2A</td>
<td style="text-align:center">*</td>
<td style="text-align:center">星号</td>
</tr>
<tr>
<td style="text-align:center">0010 1011</td>
<td style="text-align:center">53</td>
<td style="text-align:center">43</td>
<td style="text-align:center">0x2B</td>
<td style="text-align:center">+</td>
<td style="text-align:center">加号</td>
</tr>
<tr>
<td style="text-align:center">0010 1100</td>
<td style="text-align:center">54</td>
<td style="text-align:center">44</td>
<td style="text-align:center">0x2C</td>
<td style="text-align:center">,</td>
<td style="text-align:center">逗号</td>
</tr>
<tr>
<td style="text-align:center">0010 1101</td>
<td style="text-align:center">55</td>
<td style="text-align:center">45</td>
<td style="text-align:center">0x2D</td>
<td style="text-align:center">-</td>
<td style="text-align:center">减号/破折号</td>
</tr>
<tr>
<td style="text-align:center">0010 1110</td>
<td style="text-align:center">56</td>
<td style="text-align:center">46</td>
<td style="text-align:center">0x2E</td>
<td style="text-align:center">.</td>
<td style="text-align:center">句号</td>
</tr>
<tr>
<td style="text-align:center">0010 1111</td>
<td style="text-align:center">57</td>
<td style="text-align:center">47</td>
<td style="text-align:center">0x2F</td>
<td style="text-align:center">/</td>
<td style="text-align:center">斜杠</td>
</tr>
<tr>
<td style="text-align:center">0011 0000</td>
<td style="text-align:center">60</td>
<td style="text-align:center">48</td>
<td style="text-align:center">0x30</td>
<td style="text-align:center">0</td>
<td style="text-align:center">字符0</td>
</tr>
<tr>
<td style="text-align:center">0011 0001</td>
<td style="text-align:center">61</td>
<td style="text-align:center">49</td>
<td style="text-align:center">0x31</td>
<td style="text-align:center">1</td>
<td style="text-align:center">字符1</td>
</tr>
<tr>
<td style="text-align:center">0011 0010</td>
<td style="text-align:center">62</td>
<td style="text-align:center">50</td>
<td style="text-align:center">0x32</td>
<td style="text-align:center">2</td>
<td style="text-align:center">字符2</td>
</tr>
<tr>
<td style="text-align:center">0011 0011</td>
<td style="text-align:center">63</td>
<td style="text-align:center">51</td>
<td style="text-align:center">0x33</td>
<td style="text-align:center">3</td>
<td style="text-align:center">字符3</td>
</tr>
<tr>
<td style="text-align:center">0011 0100</td>
<td style="text-align:center">64</td>
<td style="text-align:center">52</td>
<td style="text-align:center">0x34</td>
<td style="text-align:center">4</td>
<td style="text-align:center">字符4</td>
</tr>
<tr>
<td style="text-align:center">0011 0101</td>
<td style="text-align:center">65</td>
<td style="text-align:center">53</td>
<td style="text-align:center">0x35</td>
<td style="text-align:center">5</td>
<td style="text-align:center">字符5</td>
</tr>
<tr>
<td style="text-align:center">0011 0110</td>
<td style="text-align:center">66</td>
<td style="text-align:center">54</td>
<td style="text-align:center">0x36</td>
<td style="text-align:center">6</td>
<td style="text-align:center">字符6</td>
</tr>
<tr>
<td style="text-align:center">0011 0111</td>
<td style="text-align:center">67</td>
<td style="text-align:center">55</td>
<td style="text-align:center">0x37</td>
<td style="text-align:center">7</td>
<td style="text-align:center">字符7</td>
</tr>
<tr>
<td style="text-align:center">0011 1000</td>
<td style="text-align:center">70</td>
<td style="text-align:center">56</td>
<td style="text-align:center">0x38</td>
<td style="text-align:center">8</td>
<td style="text-align:center">字符8</td>
</tr>
<tr>
<td style="text-align:center">0011 1001</td>
<td style="text-align:center">71</td>
<td style="text-align:center">57</td>
<td style="text-align:center">0x39</td>
<td style="text-align:center">9</td>
<td style="text-align:center">字符9</td>
</tr>
<tr>
<td style="text-align:center">0011 1010</td>
<td style="text-align:center">72</td>
<td style="text-align:center">58</td>
<td style="text-align:center">0x3A</td>
<td style="text-align:center">:</td>
<td style="text-align:center">冒号</td>
</tr>
<tr>
<td style="text-align:center">0011 1011</td>
<td style="text-align:center">73</td>
<td style="text-align:center">59</td>
<td style="text-align:center">0x3B</td>
<td style="text-align:center">;</td>
<td style="text-align:center">分号</td>
</tr>
<tr>
<td style="text-align:center">0011 1100</td>
<td style="text-align:center">74</td>
<td style="text-align:center">60</td>
<td style="text-align:center">0x3C</td>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">0011 1101</td>
<td style="text-align:center">75</td>
<td style="text-align:center">61</td>
<td style="text-align:center">0x3D</td>
<td style="text-align:center">=</td>
<td style="text-align:center">等号</td>
</tr>
<tr>
<td style="text-align:center">0011 1110</td>
<td style="text-align:center">76</td>
<td style="text-align:center">62</td>
<td style="text-align:center">0x3E</td>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">0011 1111</td>
<td style="text-align:center">77</td>
<td style="text-align:center">63</td>
<td style="text-align:center">0x3F</td>
<td style="text-align:center">?</td>
<td style="text-align:center">问号</td>
</tr>
<tr>
<td style="text-align:center">0100 0000</td>
<td style="text-align:center">100</td>
<td style="text-align:center">64</td>
<td style="text-align:center">0x40</td>
<td style="text-align:center">@</td>
<td style="text-align:center">电子邮件符号</td>
</tr>
<tr>
<td style="text-align:center">0100 0001</td>
<td style="text-align:center">101</td>
<td style="text-align:center">65</td>
<td style="text-align:center">0x41</td>
<td style="text-align:center">A</td>
<td style="text-align:center">大写字母A</td>
</tr>
<tr>
<td style="text-align:center">0100 0010</td>
<td style="text-align:center">102</td>
<td style="text-align:center">66</td>
<td style="text-align:center">0x42</td>
<td style="text-align:center">B</td>
<td style="text-align:center">大写字母B</td>
</tr>
<tr>
<td style="text-align:center">0100 0011</td>
<td style="text-align:center">103</td>
<td style="text-align:center">67</td>
<td style="text-align:center">0x43</td>
<td style="text-align:center">C</td>
<td style="text-align:center">大写字母C</td>
</tr>
<tr>
<td style="text-align:center">0100 0100</td>
<td style="text-align:center">104</td>
<td style="text-align:center">68</td>
<td style="text-align:center">0x44</td>
<td style="text-align:center">D</td>
<td style="text-align:center">大写字母D</td>
</tr>
<tr>
<td style="text-align:center">0100 0101</td>
<td style="text-align:center">105</td>
<td style="text-align:center">69</td>
<td style="text-align:center">0x45</td>
<td style="text-align:center">E</td>
<td style="text-align:center">大写字母E</td>
</tr>
<tr>
<td style="text-align:center">0100 0110</td>
<td style="text-align:center">106</td>
<td style="text-align:center">70</td>
<td style="text-align:center">0x46</td>
<td style="text-align:center">F</td>
<td style="text-align:center">大写字母F</td>
</tr>
<tr>
<td style="text-align:center">0100 0111</td>
<td style="text-align:center">107</td>
<td style="text-align:center">71</td>
<td style="text-align:center">0x47</td>
<td style="text-align:center">G</td>
<td style="text-align:center">大写字母G</td>
</tr>
<tr>
<td style="text-align:center">0100 1000</td>
<td style="text-align:center">110</td>
<td style="text-align:center">72</td>
<td style="text-align:center">0x48</td>
<td style="text-align:center">H</td>
<td style="text-align:center">大写字母H</td>
</tr>
<tr>
<td style="text-align:center">0100 1001</td>
<td style="text-align:center">111</td>
<td style="text-align:center">73</td>
<td style="text-align:center">0x49</td>
<td style="text-align:center">I</td>
<td style="text-align:center">大写字母I</td>
</tr>
<tr>
<td style="text-align:center">0100 1010</td>
<td style="text-align:center">112</td>
<td style="text-align:center">74</td>
<td style="text-align:center">0x4A</td>
<td style="text-align:center">J</td>
<td style="text-align:center">大写字母J</td>
</tr>
<tr>
<td style="text-align:center">0100 1011</td>
<td style="text-align:center">113</td>
<td style="text-align:center">75</td>
<td style="text-align:center">0x4B</td>
<td style="text-align:center">K</td>
<td style="text-align:center">大写字母K</td>
</tr>
<tr>
<td style="text-align:center">0100 1100</td>
<td style="text-align:center">114</td>
<td style="text-align:center">76</td>
<td style="text-align:center">0x4C</td>
<td style="text-align:center">L</td>
<td style="text-align:center">大写字母L</td>
</tr>
<tr>
<td style="text-align:center">0100 1101</td>
<td style="text-align:center">115</td>
<td style="text-align:center">77</td>
<td style="text-align:center">0x4D</td>
<td style="text-align:center">M</td>
<td style="text-align:center">大写字母M</td>
</tr>
<tr>
<td style="text-align:center">0100 1110</td>
<td style="text-align:center">116</td>
<td style="text-align:center">78</td>
<td style="text-align:center">0x4E</td>
<td style="text-align:center">N</td>
<td style="text-align:center">大写字母N</td>
</tr>
<tr>
<td style="text-align:center">0100 1111</td>
<td style="text-align:center">117</td>
<td style="text-align:center">79</td>
<td style="text-align:center">0x4F</td>
<td style="text-align:center">O</td>
<td style="text-align:center">大写字母O</td>
</tr>
<tr>
<td style="text-align:center">0101 0000</td>
<td style="text-align:center">120</td>
<td style="text-align:center">80</td>
<td style="text-align:center">0x50</td>
<td style="text-align:center">P</td>
<td style="text-align:center">大写字母P</td>
</tr>
<tr>
<td style="text-align:center">0101 0001</td>
<td style="text-align:center">121</td>
<td style="text-align:center">81</td>
<td style="text-align:center">0x51</td>
<td style="text-align:center">Q</td>
<td style="text-align:center">大写字母Q</td>
</tr>
<tr>
<td style="text-align:center">0101 0010</td>
<td style="text-align:center">122</td>
<td style="text-align:center">82</td>
<td style="text-align:center">0x52</td>
<td style="text-align:center">R</td>
<td style="text-align:center">大写字母R</td>
</tr>
<tr>
<td style="text-align:center">0101 0011</td>
<td style="text-align:center">123</td>
<td style="text-align:center">83</td>
<td style="text-align:center">0x53</td>
<td style="text-align:center">S</td>
<td style="text-align:center">大写字母S</td>
</tr>
<tr>
<td style="text-align:center">0101 0100</td>
<td style="text-align:center">124</td>
<td style="text-align:center">84</td>
<td style="text-align:center">0x54</td>
<td style="text-align:center">T</td>
<td style="text-align:center">大写字母T</td>
</tr>
<tr>
<td style="text-align:center">0101 0101</td>
<td style="text-align:center">125</td>
<td style="text-align:center">85</td>
<td style="text-align:center">0x55</td>
<td style="text-align:center">U</td>
<td style="text-align:center">大写字母U</td>
</tr>
<tr>
<td style="text-align:center">0101 0110</td>
<td style="text-align:center">126</td>
<td style="text-align:center">86</td>
<td style="text-align:center">0x56</td>
<td style="text-align:center">V</td>
<td style="text-align:center">大写字母V</td>
</tr>
<tr>
<td style="text-align:center">0101 0111</td>
<td style="text-align:center">127</td>
<td style="text-align:center">87</td>
<td style="text-align:center">0x57</td>
<td style="text-align:center">W</td>
<td style="text-align:center">大写字母W</td>
</tr>
<tr>
<td style="text-align:center">0101 1000</td>
<td style="text-align:center">130</td>
<td style="text-align:center">88</td>
<td style="text-align:center">0x58</td>
<td style="text-align:center">X</td>
<td style="text-align:center">大写字母X</td>
</tr>
<tr>
<td style="text-align:center">0101 1001</td>
<td style="text-align:center">131</td>
<td style="text-align:center">89</td>
<td style="text-align:center">0x59</td>
<td style="text-align:center">Y</td>
<td style="text-align:center">大写字母Y</td>
</tr>
<tr>
<td style="text-align:center">0101 1010</td>
<td style="text-align:center">132</td>
<td style="text-align:center">90</td>
<td style="text-align:center">0x5A</td>
<td style="text-align:center">Z</td>
<td style="text-align:center">大写字母Z</td>
</tr>
<tr>
<td style="text-align:center">0101 1011</td>
<td style="text-align:center">133</td>
<td style="text-align:center">91</td>
<td style="text-align:center">0x5B</td>
<td style="text-align:center">[</td>
<td style="text-align:center">开方括号</td>
</tr>
<tr>
<td style="text-align:center">0101 1100</td>
<td style="text-align:center">134</td>
<td style="text-align:center">92</td>
<td style="text-align:center">0x5C</td>
<td style="text-align:center">\</td>
<td style="text-align:center">反斜杠</td>
</tr>
<tr>
<td style="text-align:center">0101 1101</td>
<td style="text-align:center">135</td>
<td style="text-align:center">93</td>
<td style="text-align:center">0x5D</td>
<td style="text-align:center">]</td>
<td style="text-align:center">闭方括号</td>
</tr>
<tr>
<td style="text-align:center">0101 1110</td>
<td style="text-align:center">136</td>
<td style="text-align:center">94</td>
<td style="text-align:center">0x5E</td>
<td style="text-align:center">^</td>
<td style="text-align:center">脱字符</td>
</tr>
<tr>
<td style="text-align:center">0101 1111</td>
<td style="text-align:center">137</td>
<td style="text-align:center">95</td>
<td style="text-align:center">0x5F</td>
<td style="text-align:center">_</td>
<td style="text-align:center">下划线</td>
</tr>
<tr>
<td style="text-align:center">0110 0000</td>
<td style="text-align:center">140</td>
<td style="text-align:center">96</td>
<td style="text-align:center">0x60</td>
<td style="text-align:center">`</td>
<td style="text-align:center">开单引号</td>
</tr>
<tr>
<td style="text-align:center">0110 0001</td>
<td style="text-align:center">141</td>
<td style="text-align:center">97</td>
<td style="text-align:center">0x61</td>
<td style="text-align:center">a</td>
<td style="text-align:center">小写字母a</td>
</tr>
<tr>
<td style="text-align:center">0110 0010</td>
<td style="text-align:center">142</td>
<td style="text-align:center">98</td>
<td style="text-align:center">0x62</td>
<td style="text-align:center">b</td>
<td style="text-align:center">小写字母b</td>
</tr>
<tr>
<td style="text-align:center">0110 0011</td>
<td style="text-align:center">143</td>
<td style="text-align:center">99</td>
<td style="text-align:center">0x63</td>
<td style="text-align:center">c</td>
<td style="text-align:center">小写字母c</td>
</tr>
<tr>
<td style="text-align:center">0110 0100</td>
<td style="text-align:center">144</td>
<td style="text-align:center">100</td>
<td style="text-align:center">0x64</td>
<td style="text-align:center">d</td>
<td style="text-align:center">小写字母d</td>
</tr>
<tr>
<td style="text-align:center">0110 0101</td>
<td style="text-align:center">145</td>
<td style="text-align:center">101</td>
<td style="text-align:center">0x65</td>
<td style="text-align:center">e</td>
<td style="text-align:center">小写字母e</td>
</tr>
<tr>
<td style="text-align:center">0110 0110</td>
<td style="text-align:center">146</td>
<td style="text-align:center">102</td>
<td style="text-align:center">0x66</td>
<td style="text-align:center">f</td>
<td style="text-align:center">小写字母f</td>
</tr>
<tr>
<td style="text-align:center">0110 0111</td>
<td style="text-align:center">147</td>
<td style="text-align:center">103</td>
<td style="text-align:center">0x67</td>
<td style="text-align:center">g</td>
<td style="text-align:center">小写字母g</td>
</tr>
<tr>
<td style="text-align:center">0110 1000</td>
<td style="text-align:center">150</td>
<td style="text-align:center">104</td>
<td style="text-align:center">0x68</td>
<td style="text-align:center">h</td>
<td style="text-align:center">小写字母h</td>
</tr>
<tr>
<td style="text-align:center">0110 1001</td>
<td style="text-align:center">151</td>
<td style="text-align:center">105</td>
<td style="text-align:center">0x69</td>
<td style="text-align:center">i</td>
<td style="text-align:center">小写字母i</td>
</tr>
<tr>
<td style="text-align:center">0110 1010</td>
<td style="text-align:center">152</td>
<td style="text-align:center">106</td>
<td style="text-align:center">0x6A</td>
<td style="text-align:center">j</td>
<td style="text-align:center">小写字母j</td>
</tr>
<tr>
<td style="text-align:center">0110 1011</td>
<td style="text-align:center">153</td>
<td style="text-align:center">107</td>
<td style="text-align:center">0x6B</td>
<td style="text-align:center">k</td>
<td style="text-align:center">小写字母k</td>
</tr>
<tr>
<td style="text-align:center">0110 1100</td>
<td style="text-align:center">154</td>
<td style="text-align:center">108</td>
<td style="text-align:center">0x6C</td>
<td style="text-align:center">l</td>
<td style="text-align:center">小写字母l</td>
</tr>
<tr>
<td style="text-align:center">0110 1101</td>
<td style="text-align:center">155</td>
<td style="text-align:center">109</td>
<td style="text-align:center">0x6D</td>
<td style="text-align:center">m</td>
<td style="text-align:center">小写字母m</td>
</tr>
<tr>
<td style="text-align:center">0110 1110</td>
<td style="text-align:center">156</td>
<td style="text-align:center">110</td>
<td style="text-align:center">0x6E</td>
<td style="text-align:center">n</td>
<td style="text-align:center">小写字母n</td>
</tr>
<tr>
<td style="text-align:center">0110 1111</td>
<td style="text-align:center">157</td>
<td style="text-align:center">111</td>
<td style="text-align:center">0x6F</td>
<td style="text-align:center">o</td>
<td style="text-align:center">小写字母o</td>
</tr>
<tr>
<td style="text-align:center">0111 0000</td>
<td style="text-align:center">160</td>
<td style="text-align:center">112</td>
<td style="text-align:center">0x70</td>
<td style="text-align:center">p</td>
<td style="text-align:center">小写字母p</td>
</tr>
<tr>
<td style="text-align:center">0111 0001</td>
<td style="text-align:center">161</td>
<td style="text-align:center">113</td>
<td style="text-align:center">0x71</td>
<td style="text-align:center">q</td>
<td style="text-align:center">小写字母q</td>
</tr>
<tr>
<td style="text-align:center">0111 0010</td>
<td style="text-align:center">162</td>
<td style="text-align:center">114</td>
<td style="text-align:center">0x72</td>
<td style="text-align:center">r</td>
<td style="text-align:center">小写字母r</td>
</tr>
<tr>
<td style="text-align:center">0111 0011</td>
<td style="text-align:center">163</td>
<td style="text-align:center">115</td>
<td style="text-align:center">0x73</td>
<td style="text-align:center">s</td>
<td style="text-align:center">小写字母s</td>
</tr>
<tr>
<td style="text-align:center">0111 0100</td>
<td style="text-align:center">164</td>
<td style="text-align:center">116</td>
<td style="text-align:center">0x74</td>
<td style="text-align:center">t</td>
<td style="text-align:center">小写字母t</td>
</tr>
<tr>
<td style="text-align:center">0111 0101</td>
<td style="text-align:center">165</td>
<td style="text-align:center">117</td>
<td style="text-align:center">0x75</td>
<td style="text-align:center">u</td>
<td style="text-align:center">小写字母u</td>
</tr>
<tr>
<td style="text-align:center">0111 0110</td>
<td style="text-align:center">166</td>
<td style="text-align:center">118</td>
<td style="text-align:center">0x76</td>
<td style="text-align:center">v</td>
<td style="text-align:center">小写字母v</td>
</tr>
<tr>
<td style="text-align:center">0111 0111</td>
<td style="text-align:center">167</td>
<td style="text-align:center">119</td>
<td style="text-align:center">0x77</td>
<td style="text-align:center">w</td>
<td style="text-align:center">小写字母w</td>
</tr>
<tr>
<td style="text-align:center">0111 1000</td>
<td style="text-align:center">170</td>
<td style="text-align:center">120</td>
<td style="text-align:center">0x78</td>
<td style="text-align:center">x</td>
<td style="text-align:center">小写字母x</td>
</tr>
<tr>
<td style="text-align:center">0111 1001</td>
<td style="text-align:center">171</td>
<td style="text-align:center">121</td>
<td style="text-align:center">0x79</td>
<td style="text-align:center">y</td>
<td style="text-align:center">小写字母y</td>
</tr>
<tr>
<td style="text-align:center">0111 1010</td>
<td style="text-align:center">172</td>
<td style="text-align:center">122</td>
<td style="text-align:center">0x7A</td>
<td style="text-align:center">z</td>
<td style="text-align:center">小写字母z</td>
</tr>
<tr>
<td style="text-align:center">0111 1011</td>
<td style="text-align:center">173</td>
<td style="text-align:center">123</td>
<td style="text-align:center">0x7B</td>
<td style="text-align:center">{</td>
<td style="text-align:center">开花括号</td>
</tr>
<tr>
<td style="text-align:center">0111 1100</td>
<td style="text-align:center">174</td>
<td style="text-align:center">124</td>
<td style="text-align:center">0x7C</td>
<td style="text-align:center">\</td>
<td style="text-align:center"></td>
<td>垂线</td>
</tr>
<tr>
<td style="text-align:center">0111 1101</td>
<td style="text-align:center">175</td>
<td style="text-align:center">125</td>
<td style="text-align:center">0x7D</td>
<td style="text-align:center">}</td>
<td style="text-align:center">闭花括号</td>
</tr>
<tr>
<td style="text-align:center">0111 1110</td>
<td style="text-align:center">176</td>
<td style="text-align:center">126</td>
<td style="text-align:center">0x7E</td>
<td style="text-align:center">~</td>
<td style="text-align:center">波浪号</td>
</tr>
<tr>
<td style="text-align:center">0111 1111</td>
<td style="text-align:center">177</td>
<td style="text-align:center">127</td>
<td style="text-align:center">0x7F</td>
<td style="text-align:center">DEL (delete)</td>
<td style="text-align:center">删除</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>ASCII</tag>
      </tags>
  </entry>
  <entry>
    <title>选择排序</title>
    <url>/2019/08/30/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>用未排序子数组的第一个元素跟子数组的其他元素进行比较，将子数组中最小的值放在子数组的第一位。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><a id="more"></a>
<ul>
<li>取数组的第一个元素，依次跟后面元素比较，若该元素比第一个元素小，则跟第一个元素交换（保持第一个元素是相对较小的值）。</li>
<li>第一轮遍历排序结束，数组第一个元素已经是数组中的最小值。</li>
<li>第二轮遍历，对数组余下未排序子数组进行同第一轮一样的排序，使得子数组第一个元素是子数组中的最小值（数组中的次小值）。</li>
<li>由于每轮排序只能排序一个元素，所以至少需要进行数组元素长度减一（array.Length-1）轮排序。</li>
</ul>
<!-- ## 思路图解 -->
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; array.Length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[j] &lt; array[i]) &#123;</span><br><span class="line">            Swap(array, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">SelectionSort</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; array.Length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j] &lt; array[i]) &#123;</span><br><span class="line">                    Swap(array, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">int</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">            Console.Write(<span class="string">$"<span class="subst">&#123;item&#125;</span> "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 用于排序的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">25</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Console.Write(<span class="string">"排序前的数组:"</span>);</span><br><span class="line">        PrintArray(array);</span><br><span class="line">        Sort(array);</span><br><span class="line">        Console.Write(<span class="string">"排序后的数组:"</span>);</span><br><span class="line">        PrintArray(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>选择排序</tag>
      </tags>
  </entry>
  <entry>
    <title>插入排序</title>
    <url>/2019/08/30/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>拿未排序的元素跟有序的子数组比较。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><a id="more"></a>
<ul>
<li><p>开始时，第一个元素已有序。</p>
</li>
<li><p>拿无序子数组的第一个元素，跟有序数组依次比较，并记录下标。如有序数组的元素比较大，则有序后移。</p>
</li>
<li><p>当下标小于零或有序数组元素比较小时，结束比较。</p>
</li>
<li><p>执行Length-1次，排序完成。</p>
<!-- ## 思路图解 -->
</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.Length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> temp = array[i];</span><br><span class="line">    <span class="keyword">int</span> j = i<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp) &#123;</span><br><span class="line">        array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j != i<span class="number">-1</span>) &#123;</span><br><span class="line">        array[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">InsertSort</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = array[i];</span><br><span class="line">            <span class="keyword">int</span> j = i<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp) &#123;</span><br><span class="line">                array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (j != i<span class="number">-1</span>) &#123;</span><br><span class="line">                array[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">int</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">            Console.Write(<span class="string">$"<span class="subst">&#123;item&#125;</span> "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 用于排序的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">25</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Console.Write(<span class="string">"排序前的数组:"</span>);</span><br><span class="line">        PrintArray(array);</span><br><span class="line">        Sort(array);</span><br><span class="line">        Console.Write(<span class="string">"排序后的数组:"</span>);</span><br><span class="line">        PrintArray(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>插入排序</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序</title>
    <url>/2019/08/30/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>比较相邻的两个数，依次把较大的数往后移。</p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><a id="more"></a>
<ul>
<li>从数组第一个元素开始，依次比较数组相邻的两个元素，若前面的元素比后面的元素大，则交换这两个元素（保持后面一个元素较大）;</li>
<li>第一轮遍历排序结束，数组最后一个元素已经是数组中的最大值。</li>
<li>第二轮遍历，对数组余下未排序子数组进行同第一轮一样的排序，使得子数组最后一个元素是子数组中的最大值（数组中的次大值）。</li>
<li>由于每轮排序只能排序一个元素，所以至少需要进行数组元素长度减一（array.Length-1）轮排序。每轮排序只需对数组的前legnth-i（i为轮次）进行排序。</li>
</ul>
<!-- ## 思路图解 -->
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.Length<span class="number">-1</span>-i; j++)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            Swap(array, j, j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">BubbleSort</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (array == <span class="literal">null</span> || array.Length &lt; <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.Length<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    Swap(array, j, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintArray</span>(<span class="params"><span class="keyword">int</span>[] array</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">int</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">            Console.Write(<span class="string">$"<span class="subst">&#123;item&#125;</span> "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 用于排序的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">25</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        Console.Write(<span class="string">"排序前的数组:"</span>);</span><br><span class="line">        PrintArray(array);</span><br><span class="line">        Sort(array);</span><br><span class="line">        Console.Write(<span class="string">"排序后的数组:"</span>);</span><br><span class="line">        PrintArray(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>冒泡排序</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>UML类图</title>
    <url>/2019/08/30/uml%E7%B1%BB%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h2><p>UML类图建模工具：<a href="staruml.io">StarUML</a></p>
<h3 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h3><p>类图分三层。</p>
<p>第一层，显示类的名称。如果是抽象类，则使用斜体字显示。</p>
<p>第二层，类的特性。通常是字段和属性。</p>
<p>第三层，类的操作。通常是方法或行为。</p>
<a id="more"></a>
<p>类的成员访问修饰符：+（public）、-（private）、#（protected）</p>
<h3 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h3><p>接口图和类图的区别主要是顶端有&lt;&lt; interface &gt;&gt;显示。</p>
<p>第一层，接口名称。</p>
<p>第二层，接口方法。</p>
<p>接口还有另一种表示方法，棒棒糖表示法。</p>
<h3 id="类型之间的关系表示"><a href="#类型之间的关系表示" class="headerlink" title="类型之间的关系表示"></a>类型之间的关系表示</h3><p>继承关系：用空心三角形+实线表示。</p>
<p>实现接口：用空心三角形+虚线表示。</p>
<p>关联关系：用实线箭头表示。</p>
<p>聚合关系：用空心菱形+实线箭头表示。</p>
<p>组合关系：用实心菱形+实线箭头表示。</p>
<p>依赖关系：用虚线箭头表示。</p>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-策略模式</title>
    <url>/2019/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="策略模式（Strategy-Pattern）"><a href="#策略模式（Strategy-Pattern）" class="headerlink" title="策略模式（Strategy Pattern）"></a>策略模式（Strategy Pattern）</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>策略模式是行为型模式，它定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p>
<h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3><a id="more"></a>
<p>策略基类/接口。</p>
<p>策略派生类/实现类。</p>
<p>策略上下文类。</p>
<h3 id="举例实现"><a href="#举例实现" class="headerlink" title="举例实现"></a>举例实现</h3><p>编写一个算术运算计算器。</p>
<ol>
<li><p>接口</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Calculation.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICalculation</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"><span class="keyword">double</span> firstNumber, <span class="keyword">double</span> secondNumber</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>派生类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Addition.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Addition</span> : <span class="title">ICalculation</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"><span class="keyword">double</span> firstNumber, <span class="keyword">double</span> secondNumber</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstNumber + secondNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Subtraction.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Subtraction</span> : <span class="title">ICalculation</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"><span class="keyword">double</span> firstNumber, <span class="keyword">double</span> secondNumber</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstNumber - secondNumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上下文类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CalculationContext.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CalculationContext</span> &#123;</span><br><span class="line">    ICalculation CalculationStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculationContext</span>(<span class="params">ICalculation calculationStrategy</span>)</span> &#123;</span><br><span class="line">        CalculationStrategy = calculationStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Calculate</span>(<span class="params"><span class="keyword">double</span> firstNumber, <span class="keyword">double</span> secondNumber</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CalculationStrategy.Calculate(firstNumber, secondNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        CalculationContext calculation = <span class="keyword">new</span> CalculationContext(<span class="keyword">new</span> Addition());</span><br><span class="line">        System.Console.WriteLine(<span class="string">"3 + 2 = &#123;0&#125;"</span>, calculation.Calculate(<span class="number">3</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        calculation = <span class="keyword">new</span> CalculationContext(<span class="keyword">new</span> Subtraction());</span><br><span class="line">        System.Console.WriteLine(<span class="string">"3 - 2 = &#123;0&#125;"</span>, calculation.Calculate(<span class="number">3</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>策略模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-简单工厂模式</title>
    <url>/2019/08/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="简单工厂模式（Factory-Pattern"><a href="#简单工厂模式（Factory-Pattern" class="headerlink" title="简单工厂模式（Factory Pattern)"></a>简单工厂模式（Factory Pattern)</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p> 简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建并且返回哪一个产品类（这些产品类继承自一个父类或接口）的实例。</p>
<h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3><a id="more"></a>
<p>工厂类。</p>
<p>基类/接口。</p>
<p>派生类/实现类。</p>
<h3 id="举例实现"><a href="#举例实现" class="headerlink" title="举例实现"></a>举例实现</h3><p>编写一个”画图”工具。</p>
<ol>
<li><p>接口</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ISharp.cs</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Circle.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Rectangle.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Rectangle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>工厂类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ShapeFactory.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShapeFactory</span>  &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IShape <span class="keyword">void</span> <span class="title">GetShape</span>(<span class="params">String shapeType</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (shapeType == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shapeType == <span class="string">"Circle"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shapeType == <span class="string">"Rectangle"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        ShapeFactory shapeFactory = <span class="keyword">new</span> ShapeFactory();</span><br><span class="line"></span><br><span class="line">        IShape circle = shapeFactory.GetShape(<span class="string">"Circle"</span>);</span><br><span class="line">        circle.Draw();</span><br><span class="line"></span><br><span class="line">        IShape rectangle = shapeFactory.GetShape(<span class="string">"Rectangle"</span>);</span><br><span class="line">        rectangle.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>简单工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-装饰器模式</title>
    <url>/2019/08/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="装饰器模式（Decorator-Pattern）"><a href="#装饰器模式（Decorator-Pattern）" class="headerlink" title="装饰器模式（Decorator Pattern）"></a>装饰器模式（Decorator Pattern）</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>开放-封闭原则</p>
<p>不修改、扩展<br><a id="more"></a></p>
<h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3><p>要扩展的类</p>
<p>修饰器</p>
<h3 id="举例实现"><a href="#举例实现" class="headerlink" title="举例实现"></a>举例实现</h3><ol>
<li><p>接口</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IShape.cs</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Circle.cs</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Circle</span> : <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Circle."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Rectangle.cs</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Rectangle</span> : <span class="title">IShape</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Rectangle."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现了IShape接口的抽象装饰类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Decorator.cs</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Decorator</span> : <span class="title">IShape</span> &#123;</span><br><span class="line">    Protected IShape DecoratedShape;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span>(<span class="params">IShape decoratedShape</span>)</span> &#123;</span><br><span class="line">        DecoratedShape = decoratedShape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        DecoratedShape.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>具体修饰类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RedDecorator.cs</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">RedDecorator</span> : <span class="title">Decorator</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedDecorator</span>(<span class="params">IShape decoratedShape</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">Base</span>(<span class="params">decoratedShape</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        Base.Draw();</span><br><span class="line">        SetRedBorder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetRedBorder</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Border Color: Red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        IShape circle = <span class="keyword">new</span> RedDecorator(<span class="keyword">new</span> Circle());</span><br><span class="line">        circle.Draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>装饰器模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua-文件操作</title>
    <url>/2019/08/21/lua-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="简单模式和完全模式"><a href="#简单模式和完全模式" class="headerlink" title="简单模式和完全模式"></a>简单模式和完全模式</h2><ul>
<li>简单模式（simple model）拥有一个当前输入文件和一个当前输出文件，并且提供针对这些文件相关的操作。</li>
<li>完全模式（complete model） 使用外部的文件句柄来实现。它以一种面对对象的形式，将所有的文件操作定义为文件句柄的方法。</li>
</ul>
<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><a id="more"></a>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">file = <span class="built_in">io</span>.<span class="built_in">open</span>(filename [, mode])</span><br></pre></td></tr></table></figure>
<p>mode 选项</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">简介</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:left">只读，文件必须存在。默认。</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:left">只写，文件存在，则写入时覆盖原有内容。文件不存在，则创建文件。</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:left">附加写入，文件存在，则从文件末尾写入。文件不存在，则创建文件。</td>
</tr>
<tr>
<td style="text-align:center">b</td>
<td style="text-align:left">二进制模式，与r/w/a结合使用。</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:left">表示文件可读写，与r/w/a结合使用。</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">file01 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>)</span><br><span class="line">file02 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"rb"</span>)</span><br><span class="line">file03 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"w"</span>)</span><br><span class="line">file04 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"wb"</span>)</span><br><span class="line">file05 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>)</span><br><span class="line">file06 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"ab"</span>)</span><br><span class="line">file07 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r+"</span>)</span><br><span class="line">file08 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r+b"</span>)</span><br><span class="line">file09 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"w+"</span>)</span><br><span class="line">file10 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"w+b"</span>)</span><br><span class="line">file11 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a+"</span>)</span><br><span class="line">file12 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a+b"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="从文件读取数据"><a href="#从文件读取数据" class="headerlink" title="从文件读取数据"></a>从文件读取数据</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 简单模式</span></span><br><span class="line">file01 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(file01)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"简单模式读取的文件内容:\n"</span>..<span class="built_in">io</span>.<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 完全模式</span></span><br><span class="line">file02 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"完全模式读取的文件内容:\n"</span>..file02:<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭文件流</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>()</span><br><span class="line">file02:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<h2 id="向文件写入数据"><a href="#向文件写入数据" class="headerlink" title="向文件写入数据"></a>向文件写入数据</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 简单模式</span></span><br><span class="line">file01 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file01)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"-- 这是一行简单模式写入的文本。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 完全模式</span></span><br><span class="line">file02 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"a"</span>)</span><br><span class="line">file02:<span class="built_in">write</span>(<span class="string">"-- 这是一行完全模式写入的文本。"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关闭文件流</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file01)</span><br><span class="line">file02:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">file01 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(file01)</span><br><span class="line">file02 = <span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"test.lua"</span>, <span class="string">"r"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 简单模式</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file01)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 完全模式</span></span><br><span class="line">file02:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="简单模式，io的方法"><a href="#简单模式，io的方法" class="headerlink" title="简单模式，io的方法"></a>简单模式，io的方法</h3><p>调用方式：io.方法名()。如：io.read()</p>
<ol>
<li>read()</li>
</ol>
<p>输入文件一行数据，并把游标指向下一行开始地址。</p>
<p>参数：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">“*l”</td>
<td style="text-align:left">读取下一行，在文件尾 (EOF) 处返回 nil。默认。</td>
</tr>
<tr>
<td style="text-align:center">“*n”</td>
<td style="text-align:left">读取一个数字并返回它。</td>
</tr>
<tr>
<td style="text-align:center">“*a”</td>
<td style="text-align:left">从当前位置读取整个文件。</td>
</tr>
<tr>
<td style="text-align:center">number</td>
<td style="text-align:left">返回一个指定字符个数的字符串，或在 EOF 时返回 nil。</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li>tmpfile()</li>
</ol>
<p>返回一个临时文件句柄，该文件以更新模式（附加）打开，程序结束时自动删除。</p>
<ol>
<li>type(file)</li>
</ol>
<p>检测file是否一个可用的文件句柄。</p>
<ol>
<li>flush()</li>
</ol>
<p>向文件写入缓冲中的所有数据。</p>
<ol>
<li>lines(optional filename)</li>
</ol>
<p>打开指定的文件filename为只读模式并返回一个迭代函数,每次调用将获得文件中的一行内容,当到文件尾时，将返回nil,并自动关闭文件。</p>
<p>若不带参数时io.lines() io.input():lines(); 读取默认输入设备的内容，但结束时不关闭文件</p>
<h3 id="完全模式，文件句柄的方法"><a href="#完全模式，文件句柄的方法" class="headerlink" title="完全模式，文件句柄的方法"></a>完全模式，文件句柄的方法</h3><p>调用方式：文件句柄:方法名()。如：file:read()。</p>
<ol>
<li>read()</li>
</ol>
<p>作用和参数与简单模式一致。</p>
<ol>
<li>seek(optional whence, optional offset)</li>
</ol>
<p>设置和获取当前文件位置,成功则返回最终的文件位置(按字节),失败则返回nil加错误信息。</p>
<p>参数 whence 取值：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">“cur”</td>
<td style="text-align:left">从当前位置开始。默认</td>
</tr>
<tr>
<td style="text-align:center">“set”</td>
<td style="text-align:left">从文件头开始</td>
</tr>
<tr>
<td style="text-align:center">“end”</td>
<td style="text-align:left">从文件尾开始</td>
</tr>
</tbody>
</table>
</div>
<p>offset，偏移量，默认为0。</p>
<p>不带参数file:seek()则返回当前位置。<br>file:seek(“set”)则定位到文件头。<br>file:seek(“end”)则定位到文件尾并返回文件大小。</p>
<ol>
<li>flush()</li>
</ol>
<p>向文件写入缓冲中的所有数据。</p>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua IO</tag>
      </tags>
  </entry>
  <entry>
    <title>C# ADO .NET</title>
    <url>/2019/08/20/csharp-ado-net/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ADO .NET 是向 .NET程序员公开数据访问的类。</p>
<a id="more"></a>
<p>ADO .NET 类位于 System.Data.dll 中，并与System.Xml.dll 中的 XML 类集成。</p>
<h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>ADO .NET来访问和操作数据的两个主要组件包括 .NET Framework 数据提供程序和 DataSet。</p>
<ol>
<li>.NET Framework 数据提供程序<br>是专门为数据操作以及快速、只进只读访问数据而设计的组件。</li>
</ol>
<ul>
<li>Connection 对象提供到数据源的连接。</li>
<li>Command 对象可以访问用户返回数据、修改数据、运行存储过程以及发送或检索参数信息的数据库命令。</li>
<li>DataReader 对象提供一种从数据源中读取只进流的方式，可以为数据源提供高性能的数据流。</li>
<li>DataAdapter 对象在 DateSet 对象和数据源之间起到桥梁的作用。DataAdapter 使用 Command 对象在数据源中执行 SQL 命令以向 DataSet 中加载数据，并将对 DataSet 中数据的更改协调回数据源。</li>
</ul>
<ol>
<li>DataSet<br>ADO .NET DataSet 是专门为独立于任何数据源的数据访问而设计的。因此，它可以用于多种不用的数据源。<br>DataSet 包含一个或多个 DataTable 对象的集合。这些对象由数据行(Rows)和数据列(Column)以及有关 DataTable 对象中数据的主键、外键、约束和关系信息组成。</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>ADO .NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua-table操作</title>
    <url>/2019/08/19/lua-table%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="table-操作"><a href="#table-操作" class="headerlink" title="table 操作"></a>table 操作</h2><a id="more"></a>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">table.concat (table [, step [, start [, end]]])</td>
<td style="text-align:left">函数列出参数中指定table的数组部分从start位置到end位置的所有元素, 元素间以指定的分隔符(step)隔开</td>
</tr>
<tr>
<td style="text-align:center">table.insert (table, [pos,] value)</td>
<td style="text-align:left">在table的数组部分指定位置(pos)插入值为value的一个元素. pos参数可选, 默认为数组部分末尾</td>
</tr>
<tr>
<td style="text-align:center">table.maxn(table)</td>
<td style="text-align:left">指定table中所有正数key值中最大的key值. 如果不存在key值为正数的元素, 则返回0。(Lua5.2之后该方法已经不存在了)</td>
</tr>
<tr>
<td style="text-align:center">table.remove (table [, pos])</td>
<td style="text-align:left">返回table数组部分位于pos位置的元素. 其后的元素会被前移. pos参数可选, 默认为table长度, 即从最后一个元素删起。</td>
</tr>
<tr>
<td style="text-align:center">table.sort (table [, comp])</td>
<td style="text-align:left">对给定的table进行升序排序。</td>
</tr>
<tr>
<td style="text-align:center">table.getn(tableName)</td>
<td style="text-align:left">获取表的长度</td>
</tr>
</tbody>
</table>
</div>
<h2 id="操作示例"><a href="#操作示例" class="headerlink" title="操作示例"></a>操作示例</h2><ol>
<li>table.concat</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"apple"</span>&#125;</span><br><span class="line"><span class="comment">-- 返回 table 连接后的字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"连接后的字符串 "</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定连接字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"连接后的字符串 "</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits,<span class="string">", "</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定索引来连接 table</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"连接后的字符串 "</span>,<span class="built_in">table</span>.<span class="built_in">concat</span>(fruits,<span class="string">", "</span>, <span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<p>执行以上代码输出结果为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">连接后的字符串 bananaorangeapple</span><br><span class="line">连接后的字符串 banana, orange, apple</span><br><span class="line">连接后的字符串 orange, apple</span><br></pre></td></tr></table></figure>
<ol>
<li><p>table.insert、table.remove</p>
<p> table.insert() 建议在数组形式的表使用，键值对形式的表直接键值对形式插入<br> table.remove() 用于数组形式的表，键值对形式的表直接给键赋值nil</p>
</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"apple"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在末尾插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits,<span class="string">"mango"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"索引为 4 的元素为 "</span>,fruits[<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在索引为 2 的键处插入</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(fruits,<span class="number">2</span>,<span class="string">"grapes"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"索引为 2 的元素为 "</span>,fruits[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最后一个元素为 "</span>,fruits[<span class="number">5</span>])</span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">remove</span>(fruits)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"移除后最后一个元素为 "</span>,fruits[<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<ol>
<li>table.sort</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"apple"</span>,<span class="string">"grapes"</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"排序前"</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(fruits) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(fruits)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"排序后"</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(fruits) <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>执行以上代码输出结果为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">排序前</span><br><span class="line"><span class="number">1</span>   banana</span><br><span class="line"><span class="number">2</span>   orange</span><br><span class="line"><span class="number">3</span>   apple</span><br><span class="line"><span class="number">4</span>   grapes</span><br><span class="line">排序后</span><br><span class="line"><span class="number">1</span>   apple</span><br><span class="line"><span class="number">2</span>   banana</span><br><span class="line"><span class="number">3</span>   grapes</span><br><span class="line"><span class="number">4</span>   orange</span><br></pre></td></tr></table></figure>
<ol>
<li>Table中最大的正数key值</li>
</ol>
<p>table.maxn 在 Lua5.2 之后该方法已经不存在了，自定义table_maxn方法来实现。<br>以下实例演示了如何获取 table 中的最大值：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table_maxn</span><span class="params">(t)</span></span></span><br><span class="line">    <span class="keyword">local</span> mn = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> mn &lt; k <span class="keyword">then</span></span><br><span class="line">            mn = k</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> mn</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">tbl = &#123;[<span class="number">1</span>] = <span class="string">"a"</span>, [<span class="number">2</span>] = <span class="string">"b"</span>, [<span class="number">3</span>] = <span class="string">"c"</span>, [<span class="number">26</span>] = <span class="string">"z"</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tbl 长度 "</span>, #tbl)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tbl 最大值 "</span>, table_maxn(tbl))</span><br></pre></td></tr></table></figure>
<p>执行以上代码输出结果为：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">tbl 长度    <span class="number">3</span></span><br><span class="line">tbl 最大值  <span class="number">26</span></span><br></pre></td></tr></table></figure>
<ol>
<li>table.getn</li>
</ol>
<p>获取数组形式表的元素个数，键值对表使用遍历</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">myTable = &#123;&#125;</span><br><span class="line">myTable[<span class="number">1</span>] = <span class="string">"1"</span></span><br><span class="line">myTable[<span class="number">2</span>] = <span class="string">"2"</span></span><br><span class="line">myTable[<span class="number">3</span>] = <span class="string">"3"</span></span><br><span class="line">myTable[<span class="string">"r"</span>] = <span class="string">"Red"</span></span><br><span class="line">myTable[<span class="string">"g"</span>] = <span class="string">"Green"</span></span><br><span class="line">myTable[<span class="string">"b"</span>] = <span class="string">"Blue"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">table</span>.<span class="built_in">getn</span>(myTable))</span><br><span class="line"></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">pairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    length = length + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(length)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 输出</span></span><br><span class="line"><span class="comment">-- 3</span></span><br><span class="line"><span class="comment">-- 6</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua table</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua-字符串操作</title>
    <url>/2019/08/19/lua-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="Lua-字符串操作"><a href="#Lua-字符串操作" class="headerlink" title="Lua 字符串操作"></a>Lua 字符串操作</h2><a id="more"></a>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">string.upper(argument)</td>
<td style="text-align:left">字符串全部转为大写字母</td>
</tr>
<tr>
<td style="text-align:center">string.lower(argument)</td>
<td style="text-align:left">字符串全部转为小写字母</td>
</tr>
<tr>
<td style="text-align:center">string.gsub(mainString,findString,replaceString,num)</td>
<td style="text-align:left">字符串替换</td>
</tr>
<tr>
<td style="text-align:center">string.find (str, substr, [init, [end]])</td>
<td style="text-align:left">字符串查找</td>
</tr>
<tr>
<td style="text-align:center">string.reverse(arg)</td>
<td style="text-align:left">字符串反转</td>
</tr>
<tr>
<td style="text-align:center">string.format(…)</td>
<td style="text-align:left">格式化字符串</td>
</tr>
<tr>
<td style="text-align:center">string.char(arg)</td>
<td style="text-align:left">将整型数组转成字符并连接</td>
</tr>
<tr>
<td style="text-align:center">string.byte(arg[,int])</td>
<td style="text-align:left">转换字符为整数值</td>
</tr>
<tr>
<td style="text-align:center">string.len(arg)</td>
<td style="text-align:left">计算字符串长度</td>
</tr>
<tr>
<td style="text-align:center">string.rep(string, n)</td>
<td style="text-align:left">返回字符串string的n个拷贝</td>
</tr>
<tr>
<td style="text-align:center">..</td>
<td style="text-align:left">字符串连接</td>
</tr>
</tbody>
</table>
</div>
<h2 id="字符串操作示例"><a href="#字符串操作示例" class="headerlink" title="字符串操作示例"></a>字符串操作示例</h2><p>有字符串:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"AbAbAb"</span>;</span><br></pre></td></tr></table></figure>
<ol>
<li>upper</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">upper</span>(str));</span><br><span class="line"><span class="comment">-- 输出:</span></span><br><span class="line"><span class="comment">-- ABABAB</span></span><br></pre></td></tr></table></figure>
<ol>
<li>lower</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">lower</span>(str));</span><br><span class="line"><span class="comment">-- 输出:</span></span><br><span class="line"><span class="comment">-- ababab</span></span><br></pre></td></tr></table></figure>
<ol>
<li>gsub</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">gsub</span>(str, <span class="string">"Ab"</span>, <span class="string">"aB"</span>));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">gsub</span>(str, <span class="string">"Ab"</span>, <span class="string">"aB"</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">-- 输出</span></span><br><span class="line"><span class="comment">-- aBaBaB 3</span></span><br><span class="line"><span class="comment">-- aBaBAb 2</span></span><br></pre></td></tr></table></figure>
<ol>
<li>find</li>
</ol>
<p>第四个可选参数默认为flase，传入参数true表示关闭模式匹配，所以函数只做简单的查找子串的操作。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zZTkxYjYzNjAyYWE=" title="https://www.jianshu.com/p/3e91b63602aa">简书文章：Lua string.find()<i class="fa fa-external-link"></i></span></p>
<ol>
<li>reverse</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">reverse</span>(str));</span><br><span class="line"><span class="comment">-- 输出</span></span><br><span class="line"><span class="comment">-- bAbAbA</span></span><br></pre></td></tr></table></figure>
<ol>
<li>format</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"emmm %s"</span>, str));</span><br><span class="line"><span class="comment">-- 输出</span></span><br><span class="line"><span class="comment">-- emmm AbAbAb</span></span><br></pre></td></tr></table></figure>
<ol>
<li>char</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">char</span>(<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>));</span><br><span class="line"><span class="comment">-- 输出</span></span><br><span class="line"><span class="comment">-- abc</span></span><br></pre></td></tr></table></figure>
<ol>
<li>byte</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">"abc"</span>));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">"abc"</span>, <span class="number">2</span>));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">"abc"</span>, <span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">"abc"</span>, <span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">-- 输出</span></span><br><span class="line"><span class="comment">-- 97</span></span><br><span class="line"><span class="comment">-- 98</span></span><br><span class="line"><span class="comment">-- 97 98 99</span></span><br><span class="line"><span class="comment">-- 97 98 99</span></span><br></pre></td></tr></table></figure>
<ol>
<li>len</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>.<span class="built_in">len</span>(str));</span><br><span class="line"><span class="comment">-- 输出</span></span><br><span class="line"><span class="comment">-- 6</span></span><br></pre></td></tr></table></figure>
<ol>
<li>连接符</li>
</ol>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"abc"</span> .. <span class="string">"ABC"</span>);</span><br><span class="line"><span class="comment">-- 输出</span></span><br><span class="line"><span class="comment">-- abcABC</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua-函数的可变参数</title>
    <url>/2019/08/19/lua-%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h2 id="函数可变参数的声明格式"><a href="#函数可变参数的声明格式" class="headerlink" title="函数可变参数的声明格式"></a>函数可变参数的声明格式</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FunctionName</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="comment">-- do something</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintNumbers</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(&#123;...&#125;) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(index, value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PrintNumbers(<span class="number">45</span>, <span class="number">45</span>, <span class="number">34</span>, <span class="number">65</span>, <span class="number">12</span>, <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintNumbers2</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> array = &#123;...&#125;</span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(index, value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PrintNumbers2(<span class="number">45</span>, <span class="number">45</span>, <span class="number">34</span>, <span class="number">65</span>, <span class="number">12</span>, <span class="number">24</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例 3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetLength</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">select</span>(<span class="string">"#"</span>, ...)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(GetLength(<span class="number">1</span>, <span class="number">3.4</span>, <span class="string">"123"</span>, <span class="literal">true</span>, <span class="literal">nil</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例 4</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintNumbers3</span><span class="params">(...)</span></span></span><br><span class="line">4array = &#123;...&#125;</span><br><span class="line">4<span class="keyword">for</span> i=<span class="number">1</span>, <span class="built_in">table</span>.<span class="built_in">getn</span>(array), <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">44<span class="built_in">print</span>(array[i])</span><br><span class="line">4<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">PrintNumbers3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 示例 5</span></span><br><span class="line"><span class="comment">-- 传入多个函数作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func1</span><span class="params">()</span></span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"this is Func1"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Func2</span><span class="params">()</span></span></span><br><span class="line">4<span class="built_in">print</span>(<span class="string">"this is Func2"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExecuteFunction</span><span class="params">(...)</span></span></span><br><span class="line">4<span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">ipairs</span>(&#123;...&#125;) <span class="keyword">do</span></span><br><span class="line">44value()</span><br><span class="line">4<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ExecuteFunction(Func1, Func2)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>Lua函数</tag>
      </tags>
  </entry>
</search>
